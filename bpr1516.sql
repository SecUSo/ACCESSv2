-- phpMyAdmin SQL Dump
-- version 4.2.12deb2+deb8u1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Erstellungszeit: 31. Mrz 2016 um 21:43
-- Server Version: 5.5.46-0+deb8u1
-- PHP-Version: 5.6.14-0+deb8u1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Datenbank: `bpr1516`
--

-- --------------------------------------------------------

--
-- Stellvertreter-Struktur des Views `authentication_feature_class`
--
CREATE TABLE IF NOT EXISTS `authentication_feature_class` (
`auth_authentication` int(10) unsigned
,`cat_feature` int(10) unsigned
,`cat_class_feature` bigint(10) unsigned
);
-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `auth_authentications`
--

CREATE TABLE IF NOT EXISTS `auth_authentications` (
`id` int(10) unsigned NOT NULL,
  `name` varchar(45) NOT NULL,
  `category` varchar(45) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=137 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `auth_authentications`
--

INSERT INTO `auth_authentications` (`id`, `name`, `category`) VALUES
(1, 'Passwords', 'Incumbent'),
(2, 'Firefox', 'Password manager'),
(3, 'LastPass', 'Password manager'),
(4, 'URRSA', 'Proxy'),
(5, 'Impostor', 'Proxy'),
(6, 'OpenID', 'Federated'),
(7, 'MicrosoftPassport', 'Federated'),
(8, 'FacebookConnect', 'Federated'),
(9, 'BrowserID', 'Federated'),
(10, 'OTPoveremail', 'Federated'),
(11, 'PCCP', 'Graphical'),
(12, 'PassGo', 'Graphical'),
(13, 'PassPoints', 'Graphical'),
(14, 'CCP', 'Graphical'),
(15, 'Passfaces', 'Graphical'),
(16, 'CaRP', 'Graphical'),
(17, 'Xside', 'Graphical'),
(18, 'FilmPW', 'Graphical'),
(19, 'GrIDsure', 'Cognitive'),
(20, 'Weinshall', 'Cognitive'),
(21, 'WordAssociation', 'Cognitive'),
(22, 'OTPW', 'Papter tokens'),
(23, 'SKEY', 'Papter tokens'),
(24, 'PINTAN', 'Papter tokens'),
(25, 'PassWindow', 'Visual token'),
(26, 'RSASecurID', 'Hardware token'),
(27, 'Yubikey', 'Hardware token'),
(28, 'Ironkey', 'Hardware token'),
(29, 'CAPreader', 'Hardware token'),
(30, 'Pico', 'Hardware token'),
(31, 'Phoolproof', 'Phone-based'),
(32, 'Cronto', 'Phone-based'),
(33, 'MPAuth', 'Phone-based'),
(34, 'OTPoverSMS', 'Phone-based'),
(35, 'Google2Step', 'Phone-based'),
(36, 'Fingerprint', 'Biometric'),
(37, 'Iris', 'Biometric'),
(38, 'Voice', 'Biometric'),
(39, 'PalmVeins', 'Biometric'),
(40, 'Face', 'Biometric'),
(41, 'PersonalKnowledge', 'Knowledge'),
(42, 'PreferenceBased', 'Knowledge'),
(43, 'SocialReAuth', 'Knowledge'),
(44, 'FacebookSocialAuth', 'Knowledge'),
(45, 'KinWrite', 'Motion-based');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `auth_info`
--

CREATE TABLE IF NOT EXISTS `auth_info` (
  `id` int(10) unsigned NOT NULL DEFAULT '0',
  `description` varchar(8000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `auth_info`
--

INSERT INTO `auth_info` (`id`, `description`) VALUES
(1, 'A password is a word or string of characters used for user authentication to prove identity or access approval to gain access to a resource (example: an access code is a type of password), which should be kept secret from those not allowed access.\n\nThe use of passwords is known to be ancient. Sentries would challenge those wishing to enter an area or approaching it to supply a password or watchword, and would only allow a person or group to pass if they knew the password. In modern times, user names and passwords are commonly used by people during a log in process that controls access to protected computer operating systems, mobile phones, cable TV decoders, automated teller machines (ATMs), etc. A typical computer user has passwords for many purposes: logging into accounts, retrieving e-mail, accessing applications, databases, networks, web sites, and even reading the morning newspaper online.\n\nDespite the name, there is no need for passwords to be actual words; indeed passwords which are not actual words may be harder to guess, a desirable property. Some passwords are formed from multiple words and may more accurately be called a passphrase. The terms passcode and passkey are sometimes used when the secret information is purely numeric, such as the personal identification number (PIN) commonly used for ATM access. Passwords are generally short enough to be easily memorized and typed.\n\nMost organizations specify a password policy that sets requirements for the composition and usage of passwords, typically dictating minimum length, required categories (e.g. upper and lower case, numbers, and special characters), prohibited elements (e.g. own name, date of birth, address, telephone number). Some governments have national authentication frameworks that define requirements for user authentication to government services, including requirements for passwords.'),
(2, 'The Firefox Password Manager securely stores the usernames and passwords you use to access websites and then automatically fills them in for you the next time you visit a website.<br/><br/>If you use the same simple password for everything you will be more susceptible to identity theft. The Create secure passwords to keep your identity safe article shows you an easy method for creating secure passwords and using the Password Manager will help you remember them all.<br/><br/>Even though the Password Manager stores your usernames and passwords on your hard drive in an encrypted format, someone with access to your computer can still see or use them. The Use a Master Password to protect stored logins and passwords article shows you how to prevent this and keep you protected in the event your computer is lost or stolen.<br/>'),
(3, 'LastPass is a freemium password management service which stores encrypted passwords in the cloud.<br/>\r\nLastPass is standard with a web interface but also includes plugins and apps for many modern web browsers and includes support for bookmarklets.<br/>\r\n<br/>\r\nPasswords in LastPass are protected by a master password, encrypted locally, and synchronized to any other browser. LastPass has a form filler that automates password entering and form filling. It also supports password generation, site sharing and site logging.<br/>'),
(4, 'The actual mechanism that is employed will be for the user to navigate to a webserver that will act as a Man-In-The-Middle (MITM). The system URRSA: Universal Replay-Resistant Secure Authentication. The one-time data will be provided to the URRSA server, which then performs a decryption and substitution: replacing the one-time password typed at the suspect machine with the true password forwarded to the login server. <br/>\r\nIn this way the sensitive information is not typed at the untrusted machine, and neither is it displayed or downloaded to the compromised environment; nor is it stored at the URRSA server.<br/>'),
(5, 'Impostor is a web proxy, so it listens to all the traffic between your browser and the web. It is meant to continually run (as a "service" or "daemon") on a trusted server. This server is called the Impostor Proxy. (This could be your office computer or some other machine that is continuously connected to the Internet.) Users that want to use the Impostor Proxy need to adjust the settings of their browsers accordingly. <br/><br/>\r\nImpostor keeps a copy of the user''s long term authentication credentials (i.e. usernames and password) in a so-called credential database. Before the Impostor proxy can automatically log some user into a website (using the user''s appropriate authentication credentials), it needs to know which user it is talking to. For this purpose it needs to authenticate the user. Now, if it were to authenticate users based on a simple password, it would recreate the problem it was meant to solve in the first place: that passwords need to be typed into untrusted devices. Instead, Impostor uses a challenge/response mechanism to authenticate users.<br/>'),
(6, 'OpenID is an open standard and decentralized protocol by the non-profit OpenID Foundation that allows users to be authenticated by certain co-operating sites (known as Relying Parties or RP) using a third party service. This eliminates the need for webmasters to provide their own ad hoc systems and allowing users to consolidate their digital identities. In other words, users can log into multiple unrelated websites without having to register with their information over and over again. Several large organizations either issue or accept OpenIDs on their websites according to the OpenID Foundation: AOL, Blogger, Flickr, France Telecom, Google, Hyves, LiveJournal, Microsoft (provider name Microsoft account), Mixi, Myspace, Novell, Orange, Sears, Sun, Telecom Italia, Universal Music Group, VeriSign, Wordpress, and Yahoo!. Other providers include BBC, IBM, PayPal, and Steam. However, some of those organizations also develop their own authentication management such as Novell Modular Authentication Service (NMAS), and Facebook stopped using OpenID and instead uses Facebook Connect.'),
(7, 'Microsoft Passport is a single sign-on web service developed and provided by Microsoft that allows users to log into websites (like Outlook.com), devices (e.g. Windows 10 computers and tablets, or Windows Phones), and applications (including Visual Studio) using one account.<br/>'),
(8, 'Facebook Connect, also called Log in with Facebook, like OpenID, is a set of authentication APIs from Facebook that developers can use to help their users connect and share with such users'' Facebook friends (on and off Facebook) and increase engagement for their website or application. When so used, Facebook members can log on to third-party websites, applications, mobile devices and gaming systems with their Facebook identity and, while logged in, can connect with friends via these media and post information and updates to their Facebook profile.<br/>'),
(9, 'BrowserID defines a mechanism for websites to request, from the user via her user-agent, a signed assertion of email-address ownership. Web sites can use this mechanism to register users on their first visit and log them back in on subsequent visits. The trust path for these assertions of email-address ownership is federated: individual domains can certify their own users. A fallback identity provider is provided to bootstrap users with email addresses at domains that do not yet support the protocol.<br/>'),
(10, 'A one-time password (OTP) is a password that is valid for only one login session or transaction, on a computer system or other digital device. OTPs avoid a number of shortcomings that are associated with traditional (static) password-based authentication; a number of implementations also incorporate two factor authentication by ensuring that the one-time password requires access to something a person has (such as a small keyring fob device with the OTP calculator built into it, or a smartcard or specific cellphone) as well as something a person knows (such as a PIN).<br/>\r\nOTPoverEmail is a One-Time-Password that is send by an E-Mail.<br/>'),
(11, 'The proposed Persuasive Cued Click Points scheme shows assure as an utilizable and memorable\r\nauthentication mechanism. By taking improvement of users ability to identify images and the memory\r\ntrigger related with seeing a new image, PCCP has advantages over PassPoints in terms of usability. Being cued\r\nas every image is exposed and having to remember only one click-point per image appears easier than\r\nhaving to remember an ordered series of clicks on one image.<br/>'),
(12, 'PassGo keeps most of the advantages of the DAS scheme and offers stronger security and better usability.<br/>\r\nIt is a graphical authentication system.<br/>'),
(13, 'PassPoints is a graphical authentication method.<br/>\r\nUsers click on any place on an image to create a password. A tolerance around each chosen pixel is then calculated. In order to be authenticated the user must click within the tolerances in the correct sequence.<br/>'),
(14, 'Cued Click Points (CCP) is a cued-recall graphical password technique. Users click on one point per image for a sequence of images. The next image is based on the previous click-point. Users have to remember the sequence of the clicked images as these images are used for the authentication.<br/>'),
(15, 'Passfaces is a unique strong authentication technology that works with existing security systems to supplement or replace the use of passwords for system access. Passfaces uses human faces rather than alphanumeric entries to validate a user''s identity.<br/>'),
(16, 'CaRP (Captcha as gRaphical Passwords)is a graphical authentication method. This security primitive is based on hard AI problems. It is built on both texts based Captcha and imagerecognition based Captcha. Here the images used in CaRP are distorted format as like Captcha challenges. It''s a kind of authentication response test. It addresses the various security based attacks. It ensures the users with secured login authentication. It fit well with the some practical applications.<br/>'),
(17, 'XSide is an authentication mechanism that uses the front and the back of smartphones to enter stroke-based passwords.<br/>Users can switch sides during input to minimize the risk of shoulder surfing.<br/>'),
(18, 'FilmPW is a graphical authentication system where the system challenges the user by showing her a short film containing a number of pre-defined pass-events and the user has reply by proving she recognized such events.<br/>'),
(19, 'GrIDsure was a personal identification system which extends the standard ''shared-secret'' authentication model to create a secure methodology whereby a dynamic ''one-time'' password or PIN can be generated by a user. It was invented by Jonathan Craymer and Stephen Howes in November 2005. It has received positive media reception.<br/>'),
(20, 'During registration, a user is assigned a very large subset S from the set H that consists of all images in the scheme. They are then offered an extensive familiarization process where the user gets to memorize their images.<br/>\r\nDuring authentication, a subset s of S are displayed among decoys in a matrix.<br/>\r\nThe user then has to draw a virtual path between the images, starting from the top-left image. If the image the user is currently on exists in S, the user moves down. Otherwise, the user moves right. When the path has arrived at the label the bottom or to the far-right of the matrix, the user identifies the value at the label and enters that value in a multiple choice question. This process is repeated until the system determines that the possibility of a guessing attack has passed a certain threshold.<br/>'),
(21, 'Testing word associations, as an extension of simple password entry, may be a practical means of verifying the identity of individual computer users. If each user specifies his/her own cue-response associations, then responses will be easy to remember. It should be easy for legitimate users to respond correctly to word association testing, but virtually impossible for potential intruders. Such testing should also prove easy for a computer to process.<br/>'),
(22, 'One Time PassWord (OTPW) is a PAM module allowing single-use passwords to login to a system. This is especially useful in the context of Secure Shell, allowing a user to login from a public or shared computer using a single-use password which will never work again.<br/>'),
(23, 'S/KEY is a one-time password system developed for authentication to Unix-like operating systems, especially from dumb terminals or untrusted public computers on which one does not want to type a long-term password. A user''s real password is combined in an offline device with a short set of characters and a decrementing counter to form a single-use password. Because each password is only used once, they are useless to password sniffers.<br/>'),
(24, 'A transaction authentication number (TAN) is used by some online banking services as a form of single use one-time passwords to authorize financial transactions. TANs are a second layer of security above and beyond the traditional single-password authentication.<br/>'),
(25, 'PassWindow is a unique key pattern printed on a transparent section of a standard identity card.<br/>\r\nUsers simply hold their card over a generated pattern image on any display to reveal a new series of digits - a single-use password.<br/>\r\nUsers enter this new unique password to authenticate securely.<br/>'),
(26, 'RSA SecurID, formerly referred to as SecurID, is a mechanism developed by Security Dynamics (later RSA Security and now RSA, The Security Division of EMC) for performing two-factor authentication for a user to a network resource.<br/>'),
(27, 'The YubiKey is a hardware authentication device manufactured by Yubico that supports one-time passwords, public key encryption and authentication, and the Universal 2nd Factor (U2F) protocol developed by the FIDO Alliance. It allows users to securely login to their accounts by emitting one-time passwords or using a FIDO-based public/private key pair generated by the device. YubiKey also allows for storing static passwords for use at sites that do not support one-time passwords. Facebook uses YubiKey for employee credentials, and Google supports it for both employees and users. Some password managers support YubiKey.<br/>'),
(28, 'The IronKey Enterprise Secure Flash Drive, designed to be the world''s most secure USB flash drive, protects your data, passwords, and Internet privacy with some of today''s most advanced security technologies. IronKey includes a suite of security software and online services. Depending on how your System Administrator has configured IronKey.<br/>'),
(29, 'The Chip Authentication Program (CAP) is a MasterCard initiative and technical specification for using EMV banking smartcards for authenticating users and transactions in online and telephone banking. It was also adopted by Visa as Dynamic Passcode Authentication (DPA). The CAP specification defines a handheld device (CAP reader) with a smartcard slot, a numeric keypad, and a display capable of displaying at least 12 characters.<br/>'),
(30, 'Pico consists of a small portable device that stores the user''s credentials. The Picosiblings are even smaller wearable accessories that tell the Pico its owner is nearby. The Pico can then automatically log the user in to websites and other protected systems, and log them out again when appropriate.<br/>'),
(31, 'Phoolproof focuses on the prevention of phishing-attacks.<br/>\r\nTherefore the smartphone of the user is used to instruct the page view for the web-browser.<br/>\r\nTo authenticate the user has to set the website on a whitelist on his smartphone. Then the smartphone starts a secure connection to the web-browser of the user and calls the requested page. The authentication for the website is done in the web-browser of the user.<br/>'),
(32, 'The CrontoSign Mobile App leverages the widespread adoption of mobile camera-phones and provides an easy to use, portable transaction authentication solution.<br/>'),
(33, 'MP-Auth (Mobile Password Authentication) expects users to input passwords only to a personal device, and be vigilant while confirming transactions from the device.<br/>'),
(34, 'One-time passwords (OTPs) sent via SMS offer the convenience of using a mobile phone while adding the security of out-of-band delivery. Mobile phones are one of the very few devices most people already carry and actively protect. SMS offers a familiar platform for OTP delivery without the need for companies to own, distribute, or replace standalone delivery devices.<br/>'),
(35, 'Most people only have one layer - their password - to protect their account. With 2-Step Verification, if a bad guy hacks through your password layer, he''ll still need your phone or Security Key to get into your account.<br/>'),
(36, 'Fingerprint recognition or fingerprint authentication refers to the automated method of verifying a match between two human fingerprints. Fingerprints are one of many forms of biometrics used to identify individuals and verify their identity.<br/>'),
(37, 'Iris recognition is an automated method of biometric identification that uses mathematical pattern-recognition techniques on video images of one or both of the irises of an individual''s eyes, whose complex random patterns are unique, stable, and can be seen from some distance.<br>\r\nRetinal scanning is a different, ocular-based biometric technology that uses the unique patterns on a person''s retina blood vessels and is often confused with iris recognition. Iris recognition uses video camera technology with subtle near infrared illumination to acquire images of the detail-rich, intricate structures of the iris which are visible externally. Digital templates encoded from these patterns by mathematical and statistical algorithms allow the identification of an individual or someone pretending to be that individual. Databases of enrolled templates are searched by matcher engines at speeds measured in the millions of templates per second per (single-core) CPU, and with remarkably low false match rates.<br>\r\nSeveral hundred millions of persons in several countries around the world have been enrolled in iris recognition systems for convenience purposes such as passport-free automated border-crossings, and some national ID programs. A key advantage of iris recognition, besides its speed of matching and its extreme resistance to false matches, is the stability of the iris as an internal and protected, yet externally visible organ of the eye.'),
(38, 'Speaker recognition is the identification of a person from characteristics of voices (voice biometrics). It is also called voice recognition. There is a difference between speaker recognition (recognizing who is speaking) and speech recognition (recognizing what is being said). These two terms are frequently confused, and ''voice recognition'' can be used for both. In addition, there is a difference between the act of authentication (commonly referred to as speaker verification or speaker authentication) and identification. Finally, there is a difference between speaker recognition (recognizing who is speaking) and speaker diarisation (recognizing when the same speaker is speaking). Recognizing the speaker can simplify the task of translating speech in systems that have been trained on specific person''s voices or it can be used to authenticate or verify the identity of a speaker as part of a security process.<br>\r\nSpeaker recognition has a history dating back some four decades and uses the acoustic features of speech that have been found to differ between individuals. These acoustic patterns reflect both anatomy (e.g., size and shape of the throat and mouth) and learned behavioral patterns (e.g., voice pitch, speaking style). Speaker verification has earned speaker recognition its classification as a ''behavioral biometric''.'),
(39, 'Vein matching, also called vascular technology, is a technique of biometric identification through the analysis of the patterns of blood vessels visible from the surface of the skin. Though used by the Federal Bureau of Investigation and the Central Intelligence Agency, this method of identification is still in development and has not yet been universally adopted by crime labs as it is not considered as reliable as more established techniques, such as fingerprinting. However, it can be used in conjunction with existing forensic data in support of a conclusion.<br>\r\nWhile other types of biometric scanners are more popular for security systems, Vascular scanners are growing in popularity. Fingerprint scanners are more frequently used, but Naito says they generally do not provide enough data points for critical verification decisions. Since fingerprint scanners require direct contact of the finger with the scanner, dry or abraded skin can interfere with the reliability of the system. Skin diseases, such as psoriasis can also limit the accuracy of the scanner, not to mention direct contact with the scanner can result in need for more frequent cleaning and higher risk of equipment damage. Vascular scanners do not require contact with the scanner, and since the information they read is on the inside of the body, skin conditions do not affect the accuracy of the reading. Vascular scanners also work with extreme speed, scanning in less than a second. As they scan, they capture the unique pattern veins take as they branch through the hand. Compared to the Retinal Scanner, which is more accurate than the vascular scanner, the retinal scanner has much lower popularity, because of its intrusive nature. People generally are uncomfortable exposing their eyes to an unknown light, not to mention retinal scanners are more difficult to install, since variances in height and face angle must be accounted for.'),
(40, 'In this model, each user has an account and a corresponding ID in the Face Database. On a user logging in the system, Face Authentication will use face recognition technologies to analyze and determine his ID as well as his permissions on the system.<br>\r\nThis model can be applied to access control systems\r\n where the number of people is \r\nsmall; for example, user accounts in an operating s\r\nystem, members of an office or a \r\nfamily.<br>\r\nWhen receiving a request, an access control system based on face authentication must find out exactly whether the person requesting is a client or an impostor. Right after that, it decides whether to accept the login or to treat him/her as an impostor and cry out ''access denial''.<br>\r\nIn order for Face Authentication to satisfy all the security issues that an access control system asks for, the face recognition algorithms in operation must be almost completely exact.'),
(41, 'Knowledge-based authentication, commonly referred to as KBA, is a method of authentication which seeks to prove the identity of someone accessing a service, such as a financial institution or website. As the name suggests, KBA requires the knowledge of private information of the individual to prove that the person providing the identity information is the owner of the identity.<br> There are two types of KBA: ''static KBA'', which is based on a pre-agreed set of ''shared secrets''; and ''dynamic KBA'', which is based on questions generated from a wider base of personal information.'),
(42, 'The idea is to authenticate users by their personal preferences instead of using knowledge associated with their personal information. In a similar approach, a user has to answer 96 questions during the setup phase in order to obtain sufficient security against fraudulent access.<br>\r\nDuring the setup phase of this system, a user is asked to select L items he likes and D items he dislikes from several categories of topics (e.g., Playing baseball, Karaoke, Gardening, etc. ). For each user, only a subset of items is presented for selection. The subset is chosen in a random way from a larger candidate item set, and the order of the items in each category is randomized, as is the order of the categories. This avoids a static view of the questions, which would otherwise have introduced a bias in terms of what questions were typically selected.<br>\r\nThe output from the setup phase is a collection of preferences which is stored by the authentication server, along with the user name of the person performing the setup.<br>\r\nDuring the authentication phase, the user first presents his username for which the server then looks up the previously recorded preferences. These items are then randomly ordered and turned into questions to which the user has to select one out of two possible answers: like or dislike. The correctness of the answers is scored using an approach described in M. Jakobsson, E. Stolterman, S. Wetzel, and L. Yang. ''Love and Authentication'', so as to assign some positive points to each correctly answered question and some negative points to each incorrectly answered question; the exact number of points depends on the entropy of the distribution of answers to these questions among the population considered. The authentication succeeds if the total score is above a preset threshold.'),
(43, 'Social re-auth describes a concept of reauthentication over trusted relations, in case the user has no longer access his password. The user has to name a person of trust, who is equally known to the verifyer and who vouches for the user. This warrantor has to initialize the re-authentication at the verifyer for obtaining a temporary code. <br>\r\nThe warrantor transmits the password over a communication channel, over which the user is capable of verifying the identity of the warrantor.'),
(44, 'Facebook Social Authentication is a face-recognition-based authentication system. Instead of for instance using a captcha, the user is shown a few fotos of his friends and is asked to name the person in those photos.'),
(45, 'KinWrite that allows users to choose short and easy-to-memorize passwords while providing resilience to password cracking and password theft. The basic idea is to let a user write her password in space instead of typing it. Writing in space adds behavioral biometrics to a password (e.g., personal handwriting characteristics) and creates a large number of personalized passwords that are dificult to duplicate. As a result, KinWrite inherits the adantages of both password-based and biometrics-based access control: KinWrite authenticates ''who you are'' instead of ''what you own'' or '' what you know'', and allows usersto update their passwords on demand. Hence, stolen passwords, shoulder surfing, and user tracking become lessof a threat.<br>\r\nTo capture in-space handwriting (hereafter 3D-Signature), KinWrite utilizes Kinect, which is a low-cost motion input sensor device capable of recording 3D depth information of a human body.');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `auth_performances`
--

CREATE TABLE IF NOT EXISTS `auth_performances` (
  `auth_authentication` int(10) unsigned NOT NULL,
  `cat_feature` int(10) unsigned NOT NULL,
  `value` double unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `auth_performances`
--

INSERT INTO `auth_performances` (`auth_authentication`, `cat_feature`, `value`) VALUES
(1, 1, 0.606914),
(1, 2, 1),
(1, 3, 1),
(1, 4, 1),
(1, 5, 1),
(1, 6, 1),
(1, 7, 1),
(1, 8, 1),
(1, 9, 1),
(1, 10, 1),
(1, 11, 1),
(1, 12, 1),
(1, 13, 1),
(1, 14, 1),
(1, 15, 1),
(1, 16, 1),
(1, 17, 0.664197),
(1, 18, 1),
(1, 19, 1),
(1, 20, 1),
(1, 21, 1),
(1, 22, 1),
(1, 23, 1),
(1, 24, 1),
(1, 25, 2.77778),
(2, 1, 2.955556),
(2, 2, 1),
(2, 3, 1),
(2, 4, 1),
(2, 5, 1),
(2, 6, 1),
(2, 7, 1),
(2, 8, 1),
(2, 9, 1),
(2, 10, 1),
(2, 11, 1),
(2, 12, 1),
(2, 13, 1),
(2, 14, 1),
(2, 15, 1),
(2, 16, 1),
(2, 17, 0.664197),
(2, 18, 1),
(2, 19, 1),
(2, 20, 1),
(2, 21, 1),
(2, 22, 1),
(2, 23, 1),
(2, 24, 1),
(2, 25, 2.77778),
(3, 1, 2.955556),
(3, 2, 1),
(3, 3, 1),
(3, 4, 1),
(3, 5, 1),
(3, 6, 1),
(3, 7, 1),
(3, 8, 1),
(3, 9, 1),
(3, 10, 1),
(3, 11, 1),
(3, 12, 1),
(3, 13, 1),
(3, 14, 1),
(3, 15, 1),
(3, 16, 1),
(3, 17, 0.664197),
(3, 18, 1),
(3, 19, 1),
(3, 20, 1),
(3, 21, 1),
(3, 22, 1),
(3, 23, 1),
(3, 24, 1),
(3, 25, 2.77778),
(4, 1, 6.244449),
(4, 2, 1),
(4, 3, 1),
(4, 4, 1),
(4, 5, 1),
(4, 6, 1),
(4, 7, 1),
(4, 8, 1),
(4, 9, 1),
(4, 10, 1),
(4, 11, 1),
(4, 12, 1),
(4, 13, 1),
(4, 14, 1),
(4, 15, 1),
(4, 16, 1),
(4, 17, 0.664197),
(4, 18, 1),
(4, 19, 1),
(4, 20, 1),
(4, 21, 1),
(4, 22, 1),
(4, 23, 1),
(4, 24, 1),
(4, 25, 2.77778),
(5, 1, 2.955556),
(5, 2, 1),
(5, 3, 1),
(5, 4, 1),
(5, 5, 1),
(5, 6, 1),
(5, 7, 1),
(5, 8, 1),
(5, 9, 1),
(5, 10, 1),
(5, 11, 1),
(5, 12, 1),
(5, 13, 1),
(5, 14, 1),
(5, 15, 1),
(5, 16, 1),
(5, 17, 0.664197),
(5, 18, 1),
(5, 19, 1),
(5, 20, 1),
(5, 21, 1),
(5, 22, 1),
(5, 23, 1),
(5, 24, 1),
(5, 25, 2.77778),
(6, 1, 2.955556),
(6, 2, 1),
(6, 3, 1),
(6, 4, 1),
(6, 5, 1),
(6, 6, 1),
(6, 7, 1),
(6, 8, 1),
(6, 9, 1),
(6, 10, 1),
(6, 11, 1),
(6, 12, 1),
(6, 13, 1),
(6, 14, 1),
(6, 15, 1),
(6, 16, 1),
(6, 17, 0.664197),
(6, 18, 1),
(6, 19, 1),
(6, 20, 1),
(6, 21, 1),
(6, 22, 1),
(6, 23, 1),
(6, 24, 1),
(6, 25, 0.308642),
(7, 1, 2.955556),
(7, 2, 1),
(7, 3, 1),
(7, 4, 1),
(7, 5, 1),
(7, 6, 1),
(7, 7, 1),
(7, 8, 1),
(7, 9, 1),
(7, 10, 1),
(7, 11, 1),
(7, 12, 1),
(7, 13, 1),
(7, 14, 1),
(7, 15, 1),
(7, 16, 1),
(7, 17, 0.664197),
(7, 18, 1),
(7, 19, 1),
(7, 20, 1),
(7, 21, 1),
(7, 22, 1),
(7, 23, 1),
(7, 24, 1),
(7, 25, 0.308642),
(8, 1, 2.955556),
(8, 2, 1),
(8, 3, 1),
(8, 4, 1),
(8, 5, 1),
(8, 6, 1),
(8, 7, 1),
(8, 8, 1),
(8, 9, 1),
(8, 10, 1),
(8, 11, 1),
(8, 12, 1),
(8, 13, 1),
(8, 14, 1),
(8, 15, 1),
(8, 16, 1),
(8, 17, 0.664197),
(8, 18, 1),
(8, 19, 1),
(8, 20, 1),
(8, 21, 1),
(8, 22, 1),
(8, 23, 1),
(8, 24, 1),
(8, 25, 0.308642),
(9, 1, 2.955556),
(9, 2, 1),
(9, 3, 1),
(9, 4, 1),
(9, 5, 1),
(9, 6, 1),
(9, 7, 1),
(9, 8, 1),
(9, 9, 1),
(9, 10, 1),
(9, 11, 1),
(9, 12, 1),
(9, 13, 1),
(9, 14, 1),
(9, 15, 1),
(9, 16, 1),
(9, 17, 0.664197),
(9, 18, 1),
(9, 19, 1),
(9, 20, 1),
(9, 21, 1),
(9, 22, 1),
(9, 23, 1),
(9, 24, 1),
(9, 25, 0.308642),
(10, 1, 2.955556),
(10, 2, 1),
(10, 3, 1),
(10, 4, 1),
(10, 5, 1),
(10, 6, 1),
(10, 7, 1),
(10, 8, 1),
(10, 9, 1),
(10, 10, 1),
(10, 11, 1),
(10, 12, 1),
(10, 13, 1),
(10, 14, 1),
(10, 15, 1),
(10, 16, 1),
(10, 17, 0.664197),
(10, 18, 1),
(10, 19, 1),
(10, 20, 1),
(10, 21, 1),
(10, 22, 1),
(10, 23, 1),
(10, 24, 1),
(10, 25, 0.308642),
(11, 1, 0.606914),
(11, 2, 1),
(11, 3, 1),
(11, 4, 1),
(11, 5, 1),
(11, 6, 1),
(11, 7, 1),
(11, 8, 1),
(11, 9, 1),
(11, 10, 1),
(11, 11, 1),
(11, 12, 1),
(11, 13, 1),
(11, 14, 1),
(11, 15, 1),
(11, 16, 1),
(11, 17, 0.664197),
(11, 18, 1),
(11, 19, 1),
(11, 20, 1),
(11, 21, 1),
(11, 22, 1),
(11, 23, 1),
(11, 24, 1),
(11, 25, 2.77778),
(12, 1, 0.606914),
(12, 2, 1),
(12, 3, 1),
(12, 4, 1),
(12, 5, 1),
(12, 6, 1),
(12, 7, 1),
(12, 8, 1),
(12, 9, 1),
(12, 10, 1),
(12, 11, 1),
(12, 12, 1),
(12, 13, 1),
(12, 14, 1),
(12, 15, 1),
(12, 16, 1),
(12, 17, 0.664197),
(12, 18, 1),
(12, 19, 1),
(12, 20, 1),
(12, 21, 1),
(12, 22, 1),
(12, 23, 1),
(12, 24, 1),
(12, 25, 2.77778),
(13, 1, 0.606914),
(13, 2, 1),
(13, 3, 1),
(13, 4, 1),
(13, 5, 1),
(13, 6, 1),
(13, 7, 1),
(13, 8, 1),
(13, 9, 1),
(13, 10, 1),
(13, 11, 1),
(13, 12, 1),
(13, 13, 1),
(13, 14, 1),
(13, 15, 1),
(13, 16, 1),
(13, 17, 0.664197),
(13, 18, 1),
(13, 19, 1),
(13, 20, 1),
(13, 21, 1),
(13, 22, 1),
(13, 23, 1),
(13, 24, 1),
(13, 25, 2.77778),
(14, 1, 0.606914),
(14, 2, 1),
(14, 3, 1),
(14, 4, 1),
(14, 5, 1),
(14, 6, 1),
(14, 7, 1),
(14, 8, 1),
(14, 9, 1),
(14, 10, 1),
(14, 11, 1),
(14, 12, 1),
(14, 13, 1),
(14, 14, 1),
(14, 15, 1),
(14, 16, 1),
(14, 17, 0.664197),
(14, 18, 1),
(14, 19, 1),
(14, 20, 1),
(14, 21, 1),
(14, 22, 1),
(14, 23, 1),
(14, 24, 1),
(14, 25, 2.77778),
(15, 1, 0.606914),
(15, 2, 1),
(15, 3, 1),
(15, 4, 1),
(15, 5, 1),
(15, 6, 1),
(15, 7, 1),
(15, 8, 1),
(15, 9, 1),
(15, 10, 1),
(15, 11, 1),
(15, 12, 1),
(15, 13, 1),
(15, 14, 1),
(15, 15, 1),
(15, 16, 1),
(15, 17, 0.664197),
(15, 18, 1),
(15, 19, 1),
(15, 20, 1),
(15, 21, 1),
(15, 22, 1),
(15, 23, 1),
(15, 24, 1),
(15, 25, 2.77778),
(16, 1, 0.606914),
(16, 2, 1),
(16, 3, 1),
(16, 4, 1),
(16, 5, 1),
(16, 6, 1),
(16, 7, 1),
(16, 8, 1),
(16, 9, 1),
(16, 10, 1),
(16, 11, 1),
(16, 12, 1),
(16, 13, 1),
(16, 14, 1),
(16, 15, 1),
(16, 16, 1),
(16, 17, 5.977783),
(16, 18, 1),
(16, 19, 1),
(16, 20, 1),
(16, 21, 1),
(16, 22, 1),
(16, 23, 1),
(16, 24, 1),
(16, 25, 2.77778),
(17, 1, 0.606914),
(17, 2, 1),
(17, 3, 1),
(17, 4, 1),
(17, 5, 1),
(17, 6, 1),
(17, 7, 1),
(17, 8, 1),
(17, 9, 1),
(17, 10, 1),
(17, 11, 1),
(17, 12, 1),
(17, 13, 1),
(17, 14, 1),
(17, 15, 1),
(17, 16, 1),
(17, 17, 0.664197),
(17, 18, 1),
(17, 19, 1),
(17, 20, 1),
(17, 21, 1),
(17, 22, 1),
(17, 23, 1),
(17, 24, 1),
(17, 25, 2.77778),
(18, 1, 0.606914),
(18, 2, 1),
(18, 3, 1),
(18, 4, 1),
(18, 5, 1),
(18, 6, 1),
(18, 7, 1),
(18, 8, 1),
(18, 9, 1),
(18, 10, 1),
(18, 11, 1),
(18, 12, 1),
(18, 13, 1),
(18, 14, 1),
(18, 15, 1),
(18, 16, 1),
(18, 17, 0.664197),
(18, 18, 1),
(18, 19, 1),
(18, 20, 1),
(18, 21, 1),
(18, 22, 1),
(18, 23, 1),
(18, 24, 1),
(18, 25, 2.77778),
(19, 1, 0.606914),
(19, 2, 1),
(19, 3, 1),
(19, 4, 1),
(19, 5, 1),
(19, 6, 1),
(19, 7, 1),
(19, 8, 1),
(19, 9, 1),
(19, 10, 1),
(19, 11, 1),
(19, 12, 1),
(19, 13, 1),
(19, 14, 1),
(19, 15, 1),
(19, 16, 1),
(19, 17, 0.664197),
(19, 18, 1),
(19, 19, 1),
(19, 20, 1),
(19, 21, 1),
(19, 22, 1),
(19, 23, 1),
(19, 24, 1),
(19, 25, 2.77778),
(20, 1, 0.606914),
(20, 2, 1),
(20, 3, 1),
(20, 4, 1),
(20, 5, 1),
(20, 6, 1),
(20, 7, 1),
(20, 8, 1),
(20, 9, 1),
(20, 10, 1),
(20, 11, 1),
(20, 12, 1),
(20, 13, 1),
(20, 14, 1),
(20, 15, 1),
(20, 16, 1),
(20, 17, 0.664197),
(20, 18, 1),
(20, 19, 1),
(20, 20, 1),
(20, 21, 1),
(20, 22, 1),
(20, 23, 1),
(20, 24, 1),
(20, 25, 2.77778),
(21, 1, 0.606914),
(21, 2, 1),
(21, 3, 1),
(21, 4, 1),
(21, 5, 1),
(21, 6, 1),
(21, 7, 1),
(21, 8, 1),
(21, 9, 1),
(21, 10, 1),
(21, 11, 1),
(21, 12, 1),
(21, 13, 1),
(21, 14, 1),
(21, 15, 1),
(21, 16, 1),
(21, 17, 0.664197),
(21, 18, 1),
(21, 19, 1),
(21, 20, 1),
(21, 21, 1),
(21, 22, 1),
(21, 23, 1),
(21, 24, 1),
(21, 25, 2.77778),
(22, 1, 0.606914),
(22, 2, 1),
(22, 3, 1),
(22, 4, 1),
(22, 5, 1),
(22, 6, 1),
(22, 7, 1),
(22, 8, 1),
(22, 9, 1),
(22, 10, 1),
(22, 11, 1),
(22, 12, 1),
(22, 13, 1),
(22, 14, 1),
(22, 15, 1),
(22, 16, 1),
(22, 17, 5.977783),
(22, 18, 1),
(22, 19, 1),
(22, 20, 1),
(22, 21, 1),
(22, 22, 1),
(22, 23, 1),
(22, 24, 1),
(22, 25, 2.77778),
(23, 1, 6.244449),
(23, 2, 1),
(23, 3, 1),
(23, 4, 1),
(23, 5, 1),
(23, 6, 1),
(23, 7, 1),
(23, 8, 1),
(23, 9, 1),
(23, 10, 1),
(23, 11, 1),
(23, 12, 1),
(23, 13, 1),
(23, 14, 1),
(23, 15, 1),
(23, 16, 1),
(23, 17, 5.977783),
(23, 18, 1),
(23, 19, 1),
(23, 20, 1),
(23, 21, 1),
(23, 22, 1),
(23, 23, 1),
(23, 24, 1),
(23, 25, 2.77778),
(24, 1, 0.606914),
(24, 2, 1),
(24, 3, 1),
(24, 4, 1),
(24, 5, 1),
(24, 6, 1),
(24, 7, 1),
(24, 8, 1),
(24, 9, 1),
(24, 10, 1),
(24, 11, 1),
(24, 12, 1),
(24, 13, 1),
(24, 14, 1),
(24, 15, 1),
(24, 16, 1),
(24, 17, 5.977783),
(24, 18, 1),
(24, 19, 1),
(24, 20, 1),
(24, 21, 1),
(24, 22, 1),
(24, 23, 1),
(24, 24, 1),
(24, 25, 2.77778),
(25, 1, 6.244449),
(25, 2, 1),
(25, 3, 1),
(25, 4, 1),
(25, 5, 1),
(25, 6, 1),
(25, 7, 1),
(25, 8, 1),
(25, 9, 1),
(25, 10, 1),
(25, 11, 1),
(25, 12, 1),
(25, 13, 1),
(25, 14, 1),
(25, 15, 1),
(25, 16, 1),
(25, 17, 5.977783),
(25, 18, 1),
(25, 19, 1),
(25, 20, 1),
(25, 21, 1),
(25, 22, 1),
(25, 23, 1),
(25, 24, 1),
(25, 25, 2.77778),
(26, 1, 0.606914),
(26, 2, 1),
(26, 3, 1),
(26, 4, 1),
(26, 5, 1),
(26, 6, 1),
(26, 7, 1),
(26, 8, 1),
(26, 9, 1),
(26, 10, 1),
(26, 11, 1),
(26, 12, 1),
(26, 13, 1),
(26, 14, 1),
(26, 15, 1),
(26, 16, 1),
(26, 17, 5.977783),
(26, 18, 1),
(26, 19, 1),
(26, 20, 1),
(26, 21, 1),
(26, 22, 1),
(26, 23, 1),
(26, 24, 1),
(26, 25, 2.77778),
(27, 1, 0.606914),
(27, 2, 1),
(27, 3, 1),
(27, 4, 1),
(27, 5, 1),
(27, 6, 1),
(27, 7, 1),
(27, 8, 1),
(27, 9, 1),
(27, 10, 1),
(27, 11, 1),
(27, 12, 1),
(27, 13, 1),
(27, 14, 1),
(27, 15, 1),
(27, 16, 1),
(27, 17, 5.977783),
(27, 18, 1),
(27, 19, 1),
(27, 20, 1),
(27, 21, 1),
(27, 22, 1),
(27, 23, 1),
(27, 24, 1),
(27, 25, 2.77778),
(28, 1, 2.955556),
(28, 2, 1),
(28, 3, 1),
(28, 4, 1),
(28, 5, 1),
(28, 6, 1),
(28, 7, 1),
(28, 8, 1),
(28, 9, 1),
(28, 10, 1),
(28, 11, 1),
(28, 12, 1),
(28, 13, 1),
(28, 14, 1),
(28, 15, 1),
(28, 16, 1),
(28, 17, 0.664197),
(28, 18, 1),
(28, 19, 1),
(28, 20, 1),
(28, 21, 1),
(28, 22, 1),
(28, 23, 1),
(28, 24, 1),
(28, 25, 2.77778),
(29, 1, 0.606914),
(29, 2, 1),
(29, 3, 1),
(29, 4, 1),
(29, 5, 1),
(29, 6, 1),
(29, 7, 1),
(29, 8, 1),
(29, 9, 1),
(29, 10, 1),
(29, 11, 1),
(29, 12, 1),
(29, 13, 1),
(29, 14, 1),
(29, 15, 1),
(29, 16, 1),
(29, 17, 5.977783),
(29, 18, 1),
(29, 19, 1),
(29, 20, 1),
(29, 21, 1),
(29, 22, 1),
(29, 23, 1),
(29, 24, 1),
(29, 25, 2.77778),
(30, 1, 6.244449),
(30, 2, 1),
(30, 3, 1),
(30, 4, 1),
(30, 5, 1),
(30, 6, 1),
(30, 7, 1),
(30, 8, 1),
(30, 9, 1),
(30, 10, 1),
(30, 11, 1),
(30, 12, 1),
(30, 13, 1),
(30, 14, 1),
(30, 15, 1),
(30, 16, 1),
(30, 17, 5.977783),
(30, 18, 1),
(30, 19, 1),
(30, 20, 1),
(30, 21, 1),
(30, 22, 1),
(30, 23, 1),
(30, 24, 1),
(30, 25, 2.77778),
(31, 1, 0.606914),
(31, 2, 1),
(31, 3, 1),
(31, 4, 1),
(31, 5, 1),
(31, 6, 1),
(31, 7, 1),
(31, 8, 1),
(31, 9, 1.011111),
(31, 10, 1),
(31, 11, 1),
(31, 12, 1),
(31, 13, 1),
(31, 14, 1),
(31, 15, 1),
(31, 16, 1),
(31, 17, 5.977783),
(31, 18, 1),
(31, 19, 1),
(31, 20, 1),
(31, 21, 1),
(31, 22, 1),
(31, 23, 1),
(31, 24, 1),
(31, 25, 2.77778),
(32, 1, 0.606914),
(32, 2, 1),
(32, 3, 1),
(32, 4, 1),
(32, 5, 1),
(32, 6, 1),
(32, 7, 1),
(32, 8, 1),
(32, 9, 1),
(32, 10, 1),
(32, 11, 1),
(32, 12, 1),
(32, 13, 1),
(32, 14, 1),
(32, 15, 1),
(32, 16, 1),
(32, 17, 5.977783),
(32, 18, 1),
(32, 19, 1),
(32, 20, 1),
(32, 21, 1),
(32, 22, 1),
(32, 23, 1),
(32, 24, 1),
(32, 25, 2.77778),
(33, 1, 0.606914),
(33, 2, 1),
(33, 3, 1),
(33, 4, 1),
(33, 5, 1),
(33, 6, 1),
(33, 7, 1),
(33, 8, 1),
(33, 9, 0.992593),
(33, 10, 1),
(33, 11, 1),
(33, 12, 1),
(33, 13, 1),
(33, 14, 1),
(33, 15, 1),
(33, 16, 1),
(33, 17, 0.664197),
(33, 18, 1),
(33, 19, 1),
(33, 20, 1),
(33, 21, 1),
(33, 22, 1),
(33, 23, 1),
(33, 24, 1),
(33, 25, 2.77778),
(34, 1, 6.244449),
(34, 2, 1),
(34, 3, 1),
(34, 4, 1),
(34, 5, 1),
(34, 6, 1),
(34, 7, 1),
(34, 8, 1),
(34, 9, 1),
(34, 10, 1),
(34, 11, 1),
(34, 12, 1),
(34, 13, 1),
(34, 14, 1),
(34, 15, 1),
(34, 16, 1),
(34, 17, 5.977783),
(34, 18, 1),
(34, 19, 1),
(34, 20, 1),
(34, 21, 1),
(34, 22, 1),
(34, 23, 1),
(34, 24, 1),
(34, 25, 2.77778),
(35, 1, 0.606914),
(35, 2, 1),
(35, 3, 1),
(35, 4, 1),
(35, 5, 1),
(35, 6, 1),
(35, 7, 1),
(35, 8, 1),
(35, 9, 1),
(35, 10, 1),
(35, 11, 1),
(35, 12, 1),
(35, 13, 1),
(35, 14, 1),
(35, 15, 1),
(35, 16, 1),
(35, 17, 5.977783),
(35, 18, 1),
(35, 19, 1),
(35, 20, 1),
(35, 21, 1),
(35, 22, 1),
(35, 23, 1),
(35, 24, 1),
(35, 25, 2.77778),
(36, 1, 6.244449),
(36, 2, 1),
(36, 3, 1),
(36, 4, 1),
(36, 5, 1),
(36, 6, 1),
(36, 7, 1),
(36, 8, 1),
(36, 9, 1),
(36, 10, 1),
(36, 11, 1),
(36, 12, 1),
(36, 13, 1),
(36, 14, 1),
(36, 15, 1),
(36, 16, 1),
(36, 17, 5.977783),
(36, 18, 1),
(36, 19, 1),
(36, 20, 1),
(36, 21, 1),
(36, 22, 1),
(36, 23, 1),
(36, 24, 1),
(36, 25, 0.308642),
(37, 1, 6.244449),
(37, 2, 1),
(37, 3, 1),
(37, 4, 1),
(37, 5, 1),
(37, 6, 1),
(37, 7, 1),
(37, 8, 1),
(37, 9, 1),
(37, 10, 1),
(37, 11, 1),
(37, 12, 1),
(37, 13, 1),
(37, 14, 1),
(37, 15, 1),
(37, 16, 1),
(37, 17, 5.977783),
(37, 18, 1),
(37, 19, 1),
(37, 20, 1),
(37, 21, 1),
(37, 22, 1),
(37, 23, 1),
(37, 24, 1),
(37, 25, 0.308642),
(38, 1, 6.244449),
(38, 2, 1),
(38, 3, 1),
(38, 4, 1),
(38, 5, 1),
(38, 6, 1),
(38, 7, 1),
(38, 8, 1),
(38, 9, 1),
(38, 10, 1),
(38, 11, 1),
(38, 12, 1),
(38, 13, 1),
(38, 14, 1),
(38, 15, 1),
(38, 16, 1),
(38, 17, 0.664197),
(38, 18, 1),
(38, 19, 1),
(38, 20, 1),
(38, 21, 1),
(38, 22, 1),
(38, 23, 1),
(38, 24, 1),
(38, 25, 0.308642),
(39, 1, 6.244449),
(39, 2, 1),
(39, 3, 1),
(39, 4, 1),
(39, 5, 1),
(39, 6, 1),
(39, 7, 1),
(39, 8, 1),
(39, 9, 1),
(39, 10, 1),
(39, 11, 1),
(39, 12, 1),
(39, 13, 1),
(39, 14, 1),
(39, 15, 1),
(39, 16, 1),
(39, 17, 0.664197),
(39, 18, 1),
(39, 19, 1),
(39, 20, 1),
(39, 21, 1),
(39, 22, 1),
(39, 23, 1),
(39, 24, 1),
(39, 25, 0.308642),
(40, 1, 6.244449),
(40, 2, 1),
(40, 3, 1),
(40, 4, 1),
(40, 5, 1),
(40, 6, 1),
(40, 7, 1),
(40, 8, 1),
(40, 9, 1),
(40, 10, 1),
(40, 11, 1),
(40, 12, 1),
(40, 13, 1),
(40, 14, 1),
(40, 15, 1),
(40, 16, 1),
(40, 17, 0.664197),
(40, 18, 1),
(40, 19, 1),
(40, 20, 1),
(40, 21, 1),
(40, 22, 1),
(40, 23, 1),
(40, 24, 1),
(40, 25, 0.308642),
(41, 1, 2.955556),
(41, 2, 1),
(41, 3, 1),
(41, 4, 1),
(41, 5, 1),
(41, 6, 1),
(41, 7, 1),
(41, 8, 1),
(41, 9, 1),
(41, 10, 1),
(41, 11, 1),
(41, 12, 1),
(41, 13, 1),
(41, 14, 1),
(41, 15, 1),
(41, 16, 1),
(41, 17, 0.664197),
(41, 18, 1),
(41, 19, 1),
(41, 20, 1),
(41, 21, 1),
(41, 22, 1),
(41, 23, 1),
(41, 24, 1),
(41, 25, 2.77778),
(42, 1, 2.955556),
(42, 2, 1),
(42, 3, 1),
(42, 4, 1),
(42, 5, 1),
(42, 6, 1),
(42, 7, 1),
(42, 8, 1),
(42, 9, 1),
(42, 10, 1),
(42, 11, 1),
(42, 12, 1),
(42, 13, 1),
(42, 14, 1),
(42, 15, 1),
(42, 16, 1),
(42, 17, 0.664197),
(42, 18, 1),
(42, 19, 1),
(42, 20, 1),
(42, 21, 1),
(42, 22, 1),
(42, 23, 1),
(42, 24, 1),
(42, 25, 2.77778),
(43, 1, 0.606914),
(43, 2, 1),
(43, 3, 1),
(43, 4, 1),
(43, 5, 1),
(43, 6, 1),
(43, 7, 1),
(43, 8, 1),
(43, 9, 1),
(43, 10, 1),
(43, 11, 1),
(43, 12, 1),
(43, 13, 1),
(43, 14, 1),
(43, 15, 1),
(43, 16, 1),
(43, 17, 5.977783),
(43, 18, 1),
(43, 19, 1),
(43, 20, 1),
(43, 21, 1),
(43, 22, 1),
(43, 23, 1),
(43, 24, 1),
(43, 25, 2.77778),
(44, 1, 0.606914),
(44, 2, 1),
(44, 3, 1),
(44, 4, 1),
(44, 5, 1),
(44, 6, 1),
(44, 7, 1),
(44, 8, 1),
(44, 9, 1),
(44, 10, 1),
(44, 11, 1),
(44, 12, 1),
(44, 13, 1),
(44, 14, 1),
(44, 15, 1),
(44, 16, 1),
(44, 17, 0.664197),
(44, 18, 1),
(44, 19, 1),
(44, 20, 1),
(44, 21, 1),
(44, 22, 1),
(44, 23, 1),
(44, 24, 1),
(44, 25, 2.77778),
(45, 1, 0.606914),
(45, 2, 1),
(45, 3, 1),
(45, 4, 1),
(45, 5, 1),
(45, 6, 1),
(45, 7, 1),
(45, 8, 1),
(45, 9, 1),
(45, 10, 1),
(45, 11, 1),
(45, 12, 1),
(45, 13, 1),
(45, 14, 1),
(45, 15, 1),
(45, 16, 1),
(45, 17, 5.977783),
(45, 18, 1),
(45, 19, 1),
(45, 20, 1),
(45, 21, 1),
(45, 22, 1),
(45, 23, 1),
(45, 24, 1),
(45, 25, 2.77778);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `auth_subfeatures`
--

CREATE TABLE IF NOT EXISTS `auth_subfeatures` (
  `auth_authentication` int(10) unsigned NOT NULL,
  `cat_subfeature` int(10) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `auth_subfeatures`
--

INSERT INTO `auth_subfeatures` (`auth_authentication`, `cat_subfeature`) VALUES
(4, 1),
(23, 1),
(25, 1),
(30, 1),
(34, 1),
(36, 1),
(37, 1),
(38, 1),
(39, 1),
(40, 1),
(2, 2),
(3, 2),
(5, 2),
(6, 2),
(7, 2),
(8, 2),
(9, 2),
(10, 2),
(28, 2),
(41, 2),
(42, 2),
(1, 3),
(11, 3),
(12, 3),
(13, 3),
(14, 3),
(15, 3),
(16, 3),
(17, 3),
(18, 3),
(19, 3),
(20, 3),
(21, 3),
(22, 3),
(24, 3),
(26, 3),
(27, 3),
(29, 3),
(31, 3),
(32, 3),
(33, 3),
(35, 3),
(43, 3),
(44, 3),
(45, 3),
(2, 4),
(3, 4),
(5, 4),
(6, 4),
(7, 4),
(8, 4),
(9, 4),
(10, 4),
(28, 4),
(30, 4),
(34, 4),
(36, 4),
(37, 4),
(38, 4),
(39, 4),
(40, 4),
(1, 5),
(5, 5),
(6, 5),
(7, 5),
(8, 5),
(9, 5),
(10, 5),
(11, 5),
(12, 5),
(13, 5),
(14, 5),
(15, 5),
(16, 5),
(17, 5),
(18, 5),
(19, 5),
(20, 5),
(21, 5),
(36, 5),
(37, 5),
(38, 5),
(39, 5),
(40, 5),
(41, 5),
(42, 5),
(44, 5),
(45, 5),
(2, 6),
(3, 6),
(31, 6),
(32, 6),
(33, 6),
(34, 6),
(35, 6),
(43, 6),
(25, 7),
(4, 8),
(22, 8),
(23, 8),
(24, 8),
(26, 9),
(27, 9),
(28, 9),
(29, 9),
(30, 9),
(30, 10),
(36, 10),
(37, 10),
(39, 10),
(40, 10),
(38, 11),
(1, 12),
(2, 12),
(3, 12),
(4, 12),
(5, 12),
(6, 12),
(7, 12),
(8, 12),
(9, 12),
(10, 12),
(18, 12),
(19, 12),
(21, 12),
(22, 12),
(23, 12),
(24, 12),
(25, 12),
(26, 12),
(27, 12),
(28, 12),
(29, 12),
(31, 12),
(32, 12),
(33, 12),
(34, 12),
(35, 12),
(41, 12),
(44, 12),
(11, 13),
(12, 13),
(13, 13),
(14, 13),
(15, 13),
(16, 13),
(17, 13),
(20, 13),
(42, 13),
(43, 14),
(45, 14),
(1, 15),
(2, 15),
(3, 15),
(4, 15),
(5, 15),
(6, 15),
(7, 15),
(8, 15),
(9, 15),
(10, 15),
(11, 15),
(12, 15),
(13, 15),
(14, 15),
(15, 15),
(16, 15),
(17, 15),
(18, 15),
(19, 15),
(21, 15),
(22, 15),
(23, 15),
(24, 15),
(26, 15),
(27, 15),
(28, 15),
(29, 15),
(31, 15),
(32, 15),
(33, 15),
(34, 15),
(35, 15),
(36, 15),
(37, 15),
(38, 15),
(39, 15),
(40, 15),
(41, 15),
(42, 15),
(43, 15),
(44, 15),
(45, 15),
(1, 16),
(2, 16),
(3, 16),
(4, 16),
(5, 16),
(6, 16),
(7, 16),
(8, 16),
(9, 16),
(11, 16),
(12, 16),
(13, 16),
(14, 16),
(16, 16),
(17, 16),
(19, 16),
(21, 16),
(22, 16),
(23, 16),
(24, 16),
(25, 16),
(26, 16),
(27, 16),
(28, 16),
(29, 16),
(32, 16),
(35, 16),
(36, 16),
(37, 16),
(38, 16),
(39, 16),
(40, 16),
(41, 16),
(42, 16),
(44, 16),
(45, 16),
(1, 17),
(2, 17),
(3, 17),
(4, 17),
(5, 17),
(6, 17),
(7, 17),
(8, 17),
(9, 17),
(11, 17),
(12, 17),
(13, 17),
(14, 17),
(15, 17),
(16, 17),
(18, 17),
(19, 17),
(21, 17),
(22, 17),
(23, 17),
(24, 17),
(30, 17),
(34, 17),
(35, 17),
(36, 17),
(37, 17),
(38, 17),
(39, 17),
(40, 17),
(41, 17),
(42, 17),
(44, 17),
(45, 17),
(1, 18),
(2, 18),
(3, 18),
(5, 18),
(6, 18),
(7, 18),
(8, 18),
(9, 18),
(10, 18),
(11, 18),
(12, 18),
(13, 18),
(14, 18),
(15, 18),
(16, 18),
(17, 18),
(18, 18),
(21, 18),
(27, 18),
(28, 18),
(30, 18),
(31, 18),
(33, 18),
(36, 18),
(37, 18),
(38, 18),
(39, 18),
(40, 18),
(41, 18),
(42, 18),
(43, 18),
(44, 18),
(45, 18),
(2, 19),
(3, 19),
(6, 19),
(7, 19),
(8, 19),
(9, 19),
(10, 19),
(30, 19),
(42, 19),
(1, 20),
(2, 20),
(3, 20),
(4, 20),
(5, 20),
(6, 20),
(7, 20),
(8, 20),
(9, 20),
(11, 20),
(12, 20),
(13, 20),
(14, 20),
(15, 20),
(16, 20),
(18, 20),
(19, 20),
(21, 20),
(22, 20),
(23, 20),
(24, 20),
(26, 20),
(27, 20),
(29, 20),
(30, 20),
(31, 20),
(32, 20),
(33, 20),
(34, 20),
(35, 20),
(36, 20),
(37, 20),
(38, 20),
(39, 20),
(40, 20),
(41, 20),
(42, 20),
(43, 20),
(44, 20),
(45, 20),
(1, 21),
(2, 21),
(3, 21),
(4, 21),
(5, 21),
(6, 21),
(7, 21),
(8, 21),
(9, 21),
(11, 21),
(12, 21),
(13, 21),
(14, 21),
(15, 21),
(16, 21),
(17, 21),
(18, 21),
(19, 21),
(20, 21),
(21, 21),
(22, 21),
(23, 21),
(24, 21),
(25, 21),
(26, 21),
(27, 21),
(28, 21),
(29, 21),
(32, 21),
(33, 21),
(35, 21),
(36, 21),
(37, 21),
(38, 21),
(39, 21),
(40, 21),
(41, 21),
(42, 21),
(44, 21),
(45, 21),
(1, 22),
(5, 22),
(6, 22),
(7, 22),
(8, 22),
(9, 22),
(10, 22),
(11, 22),
(12, 22),
(13, 22),
(14, 22),
(15, 22),
(16, 22),
(17, 22),
(18, 22),
(19, 22),
(21, 22),
(22, 22),
(23, 22),
(24, 22),
(35, 22),
(41, 22),
(42, 22),
(45, 22),
(10, 23),
(11, 23),
(12, 23),
(13, 23),
(14, 23),
(15, 23),
(17, 23),
(30, 23),
(36, 23),
(37, 23),
(38, 23),
(39, 23),
(40, 23),
(1, 24),
(2, 24),
(3, 24),
(5, 24),
(6, 24),
(7, 24),
(8, 24),
(9, 24),
(21, 24),
(27, 24),
(28, 24),
(36, 24),
(37, 24),
(38, 24),
(39, 24),
(40, 24),
(41, 24),
(42, 24),
(43, 24),
(45, 24),
(1, 25),
(2, 25),
(3, 25),
(4, 25),
(5, 25),
(6, 25),
(7, 25),
(8, 25),
(9, 25),
(15, 25),
(18, 25),
(19, 25),
(20, 25),
(21, 25),
(22, 25),
(23, 25),
(24, 25),
(25, 25),
(26, 25),
(27, 25),
(28, 25),
(29, 25),
(30, 25),
(34, 25),
(35, 25),
(36, 25),
(37, 25),
(38, 25),
(39, 25),
(40, 25),
(41, 25),
(42, 25),
(43, 25),
(44, 25),
(1, 26),
(2, 26),
(3, 26),
(4, 26),
(5, 26),
(6, 26),
(8, 26),
(9, 26),
(10, 26),
(11, 26),
(12, 26),
(13, 26),
(14, 26),
(15, 26),
(16, 26),
(17, 26),
(18, 26),
(19, 26),
(20, 26),
(21, 26),
(22, 26),
(23, 26),
(24, 26),
(25, 26),
(31, 26),
(32, 26),
(33, 26),
(35, 26),
(38, 26),
(40, 26),
(41, 26),
(42, 26),
(43, 26),
(44, 26),
(1, 27),
(2, 27),
(3, 27),
(4, 27),
(5, 27),
(28, 27),
(1, 28),
(2, 28),
(4, 28),
(6, 28),
(7, 28),
(8, 28),
(9, 28),
(10, 28),
(11, 28),
(12, 28),
(13, 28),
(14, 28),
(15, 28),
(16, 28),
(18, 28),
(19, 28),
(20, 28),
(21, 28),
(22, 28),
(23, 28),
(24, 28),
(25, 28),
(26, 28),
(27, 28),
(28, 28),
(29, 28),
(32, 28),
(34, 28),
(35, 28),
(41, 28),
(42, 28),
(43, 28),
(44, 28),
(3, 29),
(5, 29),
(31, 29),
(33, 29),
(38, 29),
(40, 29),
(1, 30),
(2, 30),
(3, 30),
(6, 30),
(7, 30),
(8, 30),
(9, 30),
(12, 30),
(15, 30),
(22, 30),
(23, 30),
(24, 30),
(25, 30),
(26, 30),
(27, 30),
(28, 30),
(29, 30),
(32, 30),
(34, 30),
(35, 30),
(36, 30),
(37, 30),
(38, 30),
(39, 30),
(40, 30),
(41, 30),
(44, 30),
(1, 31),
(2, 31),
(5, 31),
(6, 31),
(9, 31),
(12, 31),
(15, 31),
(22, 31),
(23, 31),
(24, 31),
(29, 31),
(34, 31),
(36, 31),
(37, 31),
(38, 31),
(39, 31),
(40, 31),
(41, 31),
(1, 32),
(2, 32),
(3, 32),
(4, 32),
(5, 32),
(6, 32),
(7, 32),
(8, 32),
(9, 32),
(10, 32),
(11, 32),
(12, 32),
(13, 32),
(14, 32),
(15, 32),
(16, 32),
(17, 32),
(18, 32),
(19, 32),
(20, 32),
(21, 32),
(22, 32),
(23, 32),
(24, 32),
(25, 32),
(26, 32),
(27, 32),
(29, 32),
(31, 32),
(33, 32),
(34, 32),
(35, 32),
(36, 32),
(37, 32),
(38, 32),
(39, 32),
(40, 32),
(41, 32),
(42, 32),
(43, 32),
(45, 32),
(1, 33),
(2, 33),
(6, 33),
(9, 33),
(10, 33),
(11, 33),
(12, 33),
(13, 33),
(14, 33),
(16, 33),
(18, 33),
(20, 33),
(21, 33),
(22, 33),
(23, 33),
(24, 33),
(30, 33),
(31, 33),
(33, 33),
(34, 33),
(41, 33),
(5, 34),
(10, 34),
(18, 34),
(20, 34),
(21, 34),
(26, 34),
(27, 34),
(28, 34),
(29, 34),
(30, 34),
(31, 34),
(32, 34),
(34, 34),
(35, 34),
(38, 34),
(39, 34),
(43, 34),
(44, 34),
(4, 35),
(5, 35),
(10, 35),
(17, 35),
(18, 35),
(20, 35),
(21, 35),
(22, 35),
(23, 35),
(24, 35),
(25, 35),
(26, 35),
(27, 35),
(28, 35),
(29, 35),
(30, 35),
(31, 35),
(32, 35),
(34, 35),
(35, 35),
(36, 35),
(37, 35),
(38, 35),
(39, 35),
(40, 35),
(43, 35),
(44, 35),
(4, 36),
(5, 36),
(10, 36),
(11, 36),
(13, 36),
(14, 36),
(15, 36),
(16, 36),
(18, 36),
(20, 36),
(21, 36),
(22, 36),
(23, 36),
(24, 36),
(25, 36),
(26, 36),
(27, 36),
(28, 36),
(29, 36),
(30, 36),
(31, 36),
(32, 36),
(34, 36),
(35, 36),
(37, 36),
(38, 36),
(39, 36),
(40, 36),
(42, 36),
(43, 36),
(44, 36),
(45, 36),
(4, 37),
(5, 37),
(10, 37),
(11, 37),
(12, 37),
(13, 37),
(14, 37),
(15, 37),
(16, 37),
(17, 37),
(18, 37),
(20, 37),
(21, 37),
(22, 37),
(23, 37),
(24, 37),
(25, 37),
(26, 37),
(27, 37),
(28, 37),
(29, 37),
(30, 37),
(31, 37),
(32, 37),
(33, 37),
(34, 37),
(35, 37),
(36, 37),
(37, 37),
(39, 37),
(40, 37),
(42, 37),
(43, 37),
(44, 37),
(45, 37),
(11, 38),
(12, 38),
(13, 38),
(14, 38),
(15, 38),
(17, 38),
(18, 38),
(19, 38),
(20, 38),
(22, 38),
(23, 38),
(24, 38),
(25, 38),
(26, 38),
(27, 38),
(29, 38),
(30, 38),
(31, 38),
(32, 38),
(34, 38),
(35, 38),
(39, 38),
(16, 39),
(22, 39),
(23, 39),
(24, 39),
(25, 39),
(26, 39),
(27, 39),
(29, 39),
(30, 39),
(31, 39),
(32, 39),
(34, 39),
(35, 39),
(36, 39),
(37, 39),
(43, 39),
(45, 39),
(22, 40),
(23, 40),
(24, 40),
(25, 40),
(26, 40),
(27, 40),
(29, 40),
(30, 40),
(31, 40),
(32, 40),
(34, 40),
(35, 40),
(43, 40),
(22, 41),
(23, 41),
(24, 41),
(26, 41),
(27, 41),
(29, 41),
(30, 41),
(31, 41),
(32, 41),
(33, 41),
(4, 42),
(22, 42),
(23, 42),
(24, 42),
(26, 42),
(27, 42),
(29, 42),
(30, 42),
(6, 43),
(7, 43),
(8, 43),
(9, 43),
(10, 43),
(11, 43),
(13, 43),
(14, 43),
(15, 43),
(20, 43),
(22, 43),
(23, 43),
(24, 43),
(25, 43),
(26, 43),
(27, 43),
(29, 43),
(30, 43),
(31, 43),
(32, 43),
(34, 43),
(35, 43),
(43, 43),
(2, 44),
(3, 44),
(4, 44),
(5, 44),
(11, 44),
(13, 44),
(14, 44),
(15, 44),
(16, 44),
(18, 44),
(20, 44),
(22, 44),
(24, 44),
(25, 44),
(26, 44),
(27, 44),
(28, 44),
(29, 44),
(30, 44),
(31, 44),
(32, 44),
(33, 44),
(34, 44),
(35, 44),
(42, 44),
(43, 44),
(44, 44),
(1, 45),
(2, 45),
(3, 45),
(5, 45),
(6, 45),
(7, 45),
(8, 45),
(9, 45),
(10, 45),
(11, 45),
(12, 45),
(13, 45),
(14, 45),
(15, 45),
(16, 45),
(17, 45),
(18, 45),
(19, 45),
(20, 45),
(21, 45),
(22, 45),
(24, 45),
(26, 45),
(27, 45),
(28, 45),
(29, 45),
(30, 45),
(31, 45),
(32, 45),
(33, 45),
(34, 45),
(35, 45),
(39, 45),
(41, 45),
(42, 45),
(43, 45),
(44, 45),
(45, 45),
(1, 46),
(2, 46),
(11, 46),
(12, 46),
(13, 46),
(14, 46),
(15, 46),
(16, 46),
(17, 46),
(18, 46),
(19, 46),
(20, 46),
(21, 46),
(22, 46),
(23, 46),
(24, 46),
(25, 46),
(28, 46),
(29, 46),
(30, 46),
(31, 46),
(32, 46),
(33, 46),
(35, 46),
(36, 46),
(37, 46),
(38, 46),
(39, 46),
(40, 46),
(41, 46),
(42, 46),
(44, 46),
(45, 46),
(1, 47),
(2, 47),
(3, 47),
(4, 47),
(6, 47),
(7, 47),
(9, 47),
(10, 47),
(11, 47),
(12, 47),
(13, 47),
(14, 47),
(15, 47),
(16, 47),
(17, 47),
(18, 47),
(19, 47),
(20, 47),
(21, 47),
(22, 47),
(23, 47),
(24, 47),
(25, 47),
(26, 47),
(27, 47),
(28, 47),
(29, 47),
(30, 47),
(31, 47),
(32, 47),
(33, 47),
(34, 47),
(35, 47),
(36, 47),
(38, 47),
(39, 47),
(41, 47),
(42, 47),
(43, 47),
(44, 47),
(45, 47),
(1, 48),
(2, 48),
(3, 48),
(4, 48),
(5, 48),
(11, 48),
(12, 48),
(13, 48),
(14, 48),
(15, 48),
(16, 48),
(17, 48),
(18, 48),
(19, 48),
(20, 48),
(21, 48),
(22, 48),
(23, 48),
(24, 48),
(25, 48),
(26, 48),
(27, 48),
(28, 48),
(29, 48),
(30, 48),
(31, 48),
(32, 48),
(33, 48),
(34, 48),
(35, 48),
(41, 48),
(42, 48),
(43, 48),
(44, 48),
(45, 48);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `avg_ci_donegan_dodd`
--

CREATE TABLE IF NOT EXISTS `avg_ci_donegan_dodd` (
  `order` int(11) NOT NULL,
  `ci_value` double NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `avg_ci_donegan_dodd`
--

INSERT INTO `avg_ci_donegan_dodd` (`order`, `ci_value`) VALUES
(2, 0),
(3, 0.4887),
(4, 0.8045),
(5, 1.0591),
(6, 1.1797),
(7, 1.2519),
(8, 1.3171),
(9, 1.3733),
(10, 1.4055),
(11, 1.4213),
(12, 1.4497),
(13, 1.4643),
(14, 1.4822),
(15, 1.4969),
(16, 1.5078),
(17, 1.5153),
(18, 1.5262),
(19, 1.5313),
(20, 1.5371),
(25, 1.5619),
(30, 1.5772),
(40, 1.5976),
(50, 1.6102),
(60, 1.6178),
(70, 1.6237),
(80, 1.6277),
(90, 1.6213),
(100, 1.6339);

-- --------------------------------------------------------

--
-- Stellvertreter-Struktur des Views `category_feature_subfeature`
--
CREATE TABLE IF NOT EXISTS `category_feature_subfeature` (
`category` varchar(45)
,`feature` varchar(45)
,`subfeature` varchar(45)
);
-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_categories`
--

CREATE TABLE IF NOT EXISTS `cat_categories` (
`id` int(10) unsigned NOT NULL,
  `name` varchar(45) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_categories`
--

INSERT INTO `cat_categories` (`id`, `name`) VALUES
(2, 'Deployability'),
(3, 'Security'),
(1, 'Usability');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_class_authentications_value_pair`
--

CREATE TABLE IF NOT EXISTS `cat_class_authentications_value_pair` (
  `cat_feature` int(10) unsigned NOT NULL,
  `cat_class_feature` int(10) unsigned NOT NULL,
  `auth_authentication_1` int(10) unsigned NOT NULL,
  `auth_authentication_2` int(10) unsigned NOT NULL,
  `value` double NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_class_authentications_value_pair`
--

INSERT INTO `cat_class_authentications_value_pair` (`cat_feature`, `cat_class_feature`, `auth_authentication_1`, `auth_authentication_2`, `value`) VALUES
(11, 10, 6, 10, 1),
(11, 10, 6, 11, 1),
(11, 10, 6, 12, 1),
(11, 10, 6, 13, 1),
(11, 10, 6, 15, 1),
(11, 10, 6, 17, 1),
(11, 10, 6, 20, 1),
(11, 10, 6, 21, 1),
(11, 10, 6, 22, 1),
(11, 10, 6, 23, 1),
(11, 10, 6, 24, 1),
(11, 10, 6, 25, 1),
(11, 10, 6, 26, 1),
(11, 10, 6, 27, 1),
(11, 10, 6, 30, 1),
(11, 10, 6, 31, 1),
(11, 10, 6, 34, 1),
(11, 10, 6, 38, 1),
(11, 10, 6, 39, 1),
(11, 10, 6, 41, 1),
(11, 10, 6, 42, 1),
(11, 10, 6, 43, 1),
(11, 10, 7, 6, 1),
(11, 10, 7, 10, 1),
(11, 10, 7, 11, 1),
(11, 10, 7, 12, 1),
(11, 10, 7, 13, 1),
(11, 10, 7, 15, 1),
(11, 10, 7, 17, 1),
(11, 10, 7, 20, 1),
(11, 10, 7, 21, 1),
(11, 10, 7, 22, 1),
(11, 10, 7, 23, 1),
(11, 10, 7, 24, 1),
(11, 10, 7, 25, 1),
(11, 10, 7, 26, 1),
(11, 10, 7, 27, 1),
(11, 10, 7, 30, 1),
(11, 10, 7, 31, 1),
(11, 10, 7, 33, 1),
(11, 10, 7, 34, 1),
(11, 10, 7, 38, 1),
(11, 10, 7, 39, 1),
(11, 10, 7, 41, 1),
(11, 10, 7, 42, 1),
(11, 10, 7, 43, 1),
(11, 10, 8, 6, 1),
(11, 10, 8, 7, 1),
(11, 10, 8, 10, 1),
(11, 10, 8, 11, 1),
(11, 10, 8, 12, 1),
(11, 10, 8, 13, 1),
(11, 10, 8, 15, 1),
(11, 10, 8, 17, 1),
(11, 10, 8, 18, 1),
(11, 10, 8, 19, 1),
(11, 10, 8, 20, 1),
(11, 10, 8, 21, 1),
(11, 10, 8, 22, 1),
(11, 10, 8, 23, 1),
(11, 10, 8, 24, 1),
(11, 10, 8, 25, 1),
(11, 10, 8, 26, 1),
(11, 10, 8, 27, 1),
(11, 10, 8, 30, 1),
(11, 10, 8, 31, 1),
(11, 10, 8, 33, 1),
(11, 10, 8, 34, 1),
(11, 10, 8, 35, 1),
(11, 10, 8, 36, 1),
(11, 10, 8, 37, 1),
(11, 10, 8, 38, 1),
(11, 10, 8, 39, 1),
(11, 10, 8, 41, 1),
(11, 10, 8, 42, 1),
(11, 10, 8, 43, 1),
(11, 10, 8, 44, 1),
(11, 10, 8, 45, 1),
(11, 10, 9, 6, 1),
(11, 10, 9, 7, 1),
(11, 10, 9, 8, 1),
(11, 10, 9, 10, 1),
(11, 10, 9, 11, 1),
(11, 10, 9, 12, 1),
(11, 10, 9, 13, 1),
(11, 10, 9, 14, 1),
(11, 10, 9, 15, 1),
(11, 10, 9, 16, 1),
(11, 10, 9, 17, 1),
(11, 10, 9, 18, 1),
(11, 10, 9, 19, 1),
(11, 10, 9, 20, 1),
(11, 10, 9, 21, 1),
(11, 10, 9, 22, 1),
(11, 10, 9, 23, 1),
(11, 10, 9, 24, 1),
(11, 10, 9, 25, 1),
(11, 10, 9, 26, 1),
(11, 10, 9, 27, 1),
(11, 10, 9, 29, 1),
(11, 10, 9, 30, 1),
(11, 10, 9, 31, 1),
(11, 10, 9, 32, 1),
(11, 10, 9, 33, 1),
(11, 10, 9, 34, 1),
(11, 10, 9, 35, 1),
(11, 10, 9, 36, 1),
(11, 10, 9, 37, 1),
(11, 10, 9, 38, 1),
(11, 10, 9, 39, 1),
(11, 10, 9, 40, 1),
(11, 10, 9, 41, 1),
(11, 10, 9, 42, 1),
(11, 10, 9, 43, 1),
(11, 10, 9, 44, 1),
(11, 10, 9, 45, 1),
(11, 10, 10, 11, 1),
(11, 10, 10, 12, 1),
(11, 10, 10, 13, 1),
(11, 10, 10, 15, 1),
(11, 10, 10, 17, 1),
(11, 10, 10, 20, 1),
(11, 10, 10, 21, 1),
(11, 10, 10, 22, 1),
(11, 10, 10, 23, 1),
(11, 10, 10, 24, 1),
(11, 10, 10, 25, 1),
(11, 10, 10, 26, 1),
(11, 10, 10, 27, 1),
(11, 10, 10, 30, 1),
(11, 10, 10, 31, 1),
(11, 10, 10, 34, 1),
(11, 10, 10, 38, 1),
(11, 10, 10, 39, 1),
(11, 10, 10, 41, 1),
(11, 10, 10, 42, 1),
(11, 10, 10, 43, 1),
(11, 10, 11, 17, 1),
(11, 10, 11, 20, 1),
(11, 10, 11, 21, 1),
(11, 10, 11, 23, 1),
(11, 10, 11, 24, 1),
(11, 10, 11, 26, 1),
(11, 10, 11, 27, 1),
(11, 10, 11, 30, 1),
(11, 10, 11, 31, 1),
(11, 10, 11, 38, 1),
(11, 10, 11, 41, 1),
(11, 10, 11, 42, 1),
(11, 10, 11, 43, 1),
(11, 10, 12, 11, 1),
(11, 10, 12, 13, 1),
(11, 10, 12, 17, 1),
(11, 10, 12, 20, 1),
(11, 10, 12, 21, 1),
(11, 10, 12, 23, 1),
(11, 10, 12, 24, 1),
(11, 10, 12, 25, 1),
(11, 10, 12, 26, 1),
(11, 10, 12, 27, 1),
(11, 10, 12, 30, 1),
(11, 10, 12, 31, 1),
(11, 10, 12, 38, 1),
(11, 10, 12, 41, 1),
(11, 10, 12, 42, 1),
(11, 10, 12, 43, 1),
(11, 10, 13, 11, 1),
(11, 10, 13, 17, 1),
(11, 10, 13, 20, 1),
(11, 10, 13, 21, 1),
(11, 10, 13, 23, 1),
(11, 10, 13, 24, 1),
(11, 10, 13, 25, 1),
(11, 10, 13, 26, 1),
(11, 10, 13, 27, 1),
(11, 10, 13, 30, 1),
(11, 10, 13, 31, 1),
(11, 10, 13, 38, 1),
(11, 10, 13, 41, 1),
(11, 10, 13, 42, 1),
(11, 10, 13, 43, 1),
(11, 10, 14, 6, 1),
(11, 10, 14, 7, 1),
(11, 10, 14, 8, 1),
(11, 10, 14, 10, 1),
(11, 10, 14, 11, 1),
(11, 10, 14, 12, 1),
(11, 10, 14, 13, 1),
(11, 10, 14, 15, 1),
(11, 10, 14, 17, 1),
(11, 10, 14, 18, 1),
(11, 10, 14, 19, 1),
(11, 10, 14, 20, 1),
(11, 10, 14, 21, 1),
(11, 10, 14, 22, 1),
(11, 10, 14, 23, 1),
(11, 10, 14, 24, 1),
(11, 10, 14, 25, 1),
(11, 10, 14, 26, 1),
(11, 10, 14, 27, 1),
(11, 10, 14, 30, 1),
(11, 10, 14, 31, 1),
(11, 10, 14, 32, 1),
(11, 10, 14, 33, 1),
(11, 10, 14, 34, 1),
(11, 10, 14, 35, 1),
(11, 10, 14, 36, 1),
(11, 10, 14, 37, 1),
(11, 10, 14, 38, 1),
(11, 10, 14, 39, 1),
(11, 10, 14, 40, 1),
(11, 10, 14, 41, 1),
(11, 10, 14, 42, 1),
(11, 10, 14, 43, 1),
(11, 10, 14, 44, 1),
(11, 10, 14, 45, 1),
(11, 10, 15, 11, 1),
(11, 10, 15, 12, 1),
(11, 10, 15, 13, 1),
(11, 10, 15, 17, 1),
(11, 10, 15, 20, 1),
(11, 10, 15, 21, 1),
(11, 10, 15, 23, 1),
(11, 10, 15, 24, 1),
(11, 10, 15, 25, 1),
(11, 10, 15, 26, 1),
(11, 10, 15, 27, 1),
(11, 10, 15, 30, 1),
(11, 10, 15, 31, 1),
(11, 10, 15, 38, 1),
(11, 10, 15, 41, 1),
(11, 10, 15, 42, 1),
(11, 10, 15, 43, 1),
(11, 10, 16, 6, 1),
(11, 10, 16, 7, 1),
(11, 10, 16, 8, 1),
(11, 10, 16, 10, 1),
(11, 10, 16, 11, 1),
(11, 10, 16, 12, 1),
(11, 10, 16, 13, 1),
(11, 10, 16, 14, 1),
(11, 10, 16, 15, 1),
(11, 10, 16, 17, 1),
(11, 10, 16, 18, 1),
(11, 10, 16, 19, 1),
(11, 10, 16, 20, 1),
(11, 10, 16, 21, 1),
(11, 10, 16, 22, 1),
(11, 10, 16, 23, 1),
(11, 10, 16, 24, 1),
(11, 10, 16, 25, 1),
(11, 10, 16, 26, 1),
(11, 10, 16, 27, 1),
(11, 10, 16, 30, 1),
(9, 1, 16, 31, 1),
(11, 10, 16, 31, 1),
(9, 1, 16, 32, 1),
(11, 10, 16, 32, 1),
(9, 1, 16, 33, 1),
(11, 10, 16, 33, 1),
(11, 10, 16, 34, 1),
(11, 10, 16, 35, 1),
(11, 10, 16, 36, 1),
(11, 10, 16, 37, 1),
(11, 10, 16, 38, 1),
(11, 10, 16, 39, 1),
(11, 10, 16, 40, 1),
(11, 10, 16, 41, 1),
(11, 10, 16, 42, 1),
(11, 10, 16, 43, 1),
(11, 10, 16, 44, 1),
(11, 10, 16, 45, 1),
(11, 10, 17, 27, 1),
(11, 10, 18, 6, 1),
(11, 10, 18, 7, 1),
(11, 10, 18, 10, 1),
(11, 10, 18, 11, 1),
(11, 10, 18, 12, 1),
(11, 10, 18, 13, 1),
(11, 10, 18, 15, 1),
(11, 10, 18, 17, 1),
(11, 10, 18, 19, 1),
(11, 10, 18, 20, 1),
(11, 10, 18, 21, 1),
(11, 10, 18, 22, 1),
(11, 10, 18, 23, 1),
(11, 10, 18, 24, 1),
(11, 10, 18, 25, 1),
(11, 10, 18, 26, 1),
(11, 10, 18, 27, 1),
(11, 10, 18, 30, 1),
(11, 10, 18, 31, 1),
(11, 10, 18, 33, 1),
(11, 10, 18, 34, 1),
(11, 10, 18, 35, 1),
(11, 10, 18, 36, 1),
(11, 10, 18, 37, 1),
(11, 10, 18, 38, 1),
(11, 10, 18, 39, 1),
(11, 10, 18, 41, 1),
(11, 10, 18, 42, 1),
(11, 10, 18, 43, 1),
(11, 10, 18, 45, 1),
(11, 10, 19, 6, 1),
(11, 10, 19, 7, 1),
(11, 10, 19, 10, 1),
(11, 10, 19, 11, 1),
(11, 10, 19, 12, 1),
(11, 10, 19, 13, 1),
(11, 10, 19, 15, 1),
(11, 10, 19, 17, 1),
(11, 10, 19, 20, 1),
(11, 10, 19, 21, 1),
(11, 10, 19, 22, 1),
(11, 10, 19, 23, 1),
(11, 10, 19, 24, 1),
(11, 10, 19, 25, 1),
(11, 10, 19, 26, 1),
(11, 10, 19, 27, 1),
(11, 10, 19, 30, 1),
(11, 10, 19, 31, 1),
(11, 10, 19, 33, 1),
(11, 10, 19, 34, 1),
(11, 10, 19, 37, 1),
(11, 10, 19, 38, 1),
(11, 10, 19, 39, 1),
(11, 10, 19, 41, 1),
(11, 10, 19, 42, 1),
(11, 10, 19, 43, 1),
(11, 10, 19, 45, 1),
(11, 10, 20, 17, 1),
(11, 10, 20, 21, 1),
(11, 10, 20, 27, 1),
(11, 10, 21, 17, 1),
(11, 10, 21, 27, 1),
(11, 10, 22, 11, 1),
(11, 10, 22, 12, 1),
(11, 10, 22, 13, 1),
(11, 10, 22, 15, 1),
(11, 10, 22, 17, 1),
(11, 10, 22, 20, 1),
(11, 10, 22, 21, 1),
(11, 10, 22, 23, 1),
(11, 10, 22, 24, 1),
(11, 10, 22, 25, 1),
(11, 10, 22, 26, 1),
(11, 10, 22, 27, 1),
(11, 10, 22, 30, 1),
(11, 10, 22, 31, 1),
(11, 10, 22, 38, 1),
(11, 10, 22, 39, 1),
(11, 10, 22, 41, 1),
(11, 10, 22, 42, 1),
(11, 10, 22, 43, 1),
(11, 10, 23, 17, 1),
(11, 10, 23, 20, 1),
(11, 10, 23, 21, 1),
(11, 10, 23, 27, 1),
(11, 10, 23, 38, 1),
(11, 10, 23, 43, 1),
(11, 10, 24, 17, 1),
(11, 10, 24, 20, 1),
(11, 10, 24, 21, 1),
(11, 10, 24, 23, 1),
(11, 10, 24, 26, 1),
(11, 10, 24, 27, 1),
(11, 10, 24, 38, 1),
(11, 10, 24, 42, 1),
(11, 10, 24, 43, 1),
(11, 10, 25, 11, 1),
(11, 10, 25, 17, 1),
(11, 10, 25, 20, 1),
(11, 10, 25, 21, 1),
(11, 10, 25, 23, 1),
(11, 10, 25, 24, 1),
(11, 10, 25, 26, 1),
(11, 10, 25, 27, 1),
(11, 10, 25, 30, 1),
(11, 10, 25, 31, 1),
(11, 10, 25, 38, 1),
(11, 10, 25, 41, 1),
(11, 10, 25, 42, 1),
(11, 10, 25, 43, 1),
(11, 10, 26, 17, 1),
(11, 10, 26, 20, 1),
(11, 10, 26, 21, 1),
(11, 10, 26, 23, 1),
(11, 10, 26, 27, 1),
(11, 10, 26, 38, 1),
(11, 10, 26, 43, 1),
(11, 10, 29, 6, 1),
(11, 10, 29, 7, 1),
(11, 10, 29, 8, 1),
(11, 10, 29, 10, 1),
(11, 10, 29, 11, 1),
(11, 10, 29, 12, 1),
(11, 10, 29, 13, 1),
(11, 10, 29, 14, 1),
(11, 10, 29, 15, 1),
(11, 10, 29, 16, 1),
(11, 10, 29, 17, 1),
(11, 10, 29, 18, 1),
(11, 10, 29, 19, 1),
(11, 10, 29, 20, 1),
(11, 10, 29, 21, 1),
(11, 10, 29, 22, 1),
(11, 10, 29, 23, 1),
(11, 10, 29, 24, 1),
(11, 10, 29, 25, 1),
(11, 10, 29, 26, 1),
(11, 10, 29, 27, 1),
(11, 10, 29, 30, 1),
(11, 10, 29, 31, 1),
(11, 10, 29, 32, 1),
(11, 10, 29, 33, 1),
(11, 10, 29, 34, 1),
(11, 10, 29, 35, 1),
(11, 10, 29, 36, 1),
(11, 10, 29, 37, 1),
(11, 10, 29, 38, 1),
(11, 10, 29, 39, 1),
(11, 10, 29, 40, 1),
(11, 10, 29, 41, 1),
(11, 10, 29, 42, 1),
(11, 10, 29, 43, 1),
(11, 10, 29, 44, 1),
(11, 10, 29, 45, 1),
(11, 10, 30, 17, 1),
(11, 10, 30, 20, 1),
(11, 10, 30, 21, 1),
(11, 10, 30, 23, 1),
(11, 10, 30, 24, 1),
(11, 10, 30, 26, 1),
(11, 10, 30, 27, 1),
(11, 10, 30, 38, 1),
(11, 10, 30, 42, 1),
(11, 10, 30, 43, 1),
(11, 10, 31, 17, 1),
(11, 10, 31, 20, 1),
(11, 10, 31, 21, 1),
(11, 10, 31, 23, 1),
(11, 10, 31, 24, 1),
(11, 10, 31, 26, 1),
(11, 10, 31, 27, 1),
(11, 10, 31, 30, 1),
(11, 10, 31, 38, 1),
(11, 10, 31, 42, 1),
(11, 10, 31, 43, 1),
(11, 10, 32, 6, 1),
(11, 10, 32, 7, 1),
(11, 10, 32, 8, 1),
(11, 10, 32, 10, 1),
(11, 10, 32, 11, 1),
(11, 10, 32, 12, 1),
(11, 10, 32, 13, 1),
(11, 10, 32, 15, 1),
(11, 10, 32, 17, 1),
(11, 10, 32, 18, 1),
(11, 10, 32, 19, 1),
(11, 10, 32, 20, 1),
(11, 10, 32, 21, 1),
(11, 10, 32, 22, 1),
(11, 10, 32, 23, 1),
(11, 10, 32, 24, 1),
(11, 10, 32, 25, 1),
(11, 10, 32, 26, 1),
(11, 10, 32, 27, 1),
(11, 10, 32, 30, 1),
(9, 1, 32, 31, 1),
(11, 10, 32, 31, 1),
(9, 1, 32, 33, 1),
(11, 10, 32, 33, 1),
(11, 10, 32, 34, 1),
(11, 10, 32, 35, 1),
(11, 10, 32, 36, 1),
(11, 10, 32, 37, 1),
(11, 10, 32, 38, 1),
(11, 10, 32, 39, 1),
(11, 10, 32, 40, 1),
(11, 10, 32, 41, 1),
(11, 10, 32, 42, 1),
(11, 10, 32, 43, 1),
(11, 10, 32, 44, 1),
(11, 10, 32, 45, 1),
(11, 10, 33, 6, 1),
(11, 10, 33, 10, 1),
(11, 10, 33, 11, 1),
(11, 10, 33, 12, 1),
(11, 10, 33, 13, 1),
(11, 10, 33, 15, 1),
(11, 10, 33, 17, 1),
(11, 10, 33, 20, 1),
(11, 10, 33, 21, 1),
(11, 10, 33, 22, 1),
(11, 10, 33, 23, 1),
(11, 10, 33, 24, 1),
(11, 10, 33, 25, 1),
(11, 10, 33, 26, 1),
(11, 10, 33, 27, 1),
(11, 10, 33, 30, 1),
(9, 1, 33, 31, 0.666667),
(11, 10, 33, 31, 1),
(11, 10, 33, 34, 1),
(11, 10, 33, 38, 1),
(11, 10, 33, 39, 1),
(11, 10, 33, 41, 1),
(11, 10, 33, 42, 1),
(11, 10, 33, 43, 1),
(11, 10, 34, 11, 1),
(11, 10, 34, 12, 1),
(11, 10, 34, 13, 1),
(11, 10, 34, 15, 1),
(11, 10, 34, 17, 1),
(11, 10, 34, 20, 1),
(11, 10, 34, 21, 1),
(11, 10, 34, 22, 1),
(11, 10, 34, 23, 1),
(11, 10, 34, 24, 1),
(11, 10, 34, 25, 1),
(11, 10, 34, 26, 1),
(11, 10, 34, 27, 1),
(11, 10, 34, 30, 1),
(11, 10, 34, 31, 1),
(11, 10, 34, 38, 1),
(11, 10, 34, 39, 1),
(11, 10, 34, 41, 1),
(11, 10, 34, 42, 1),
(11, 10, 34, 43, 1),
(11, 10, 35, 6, 1),
(11, 10, 35, 7, 1),
(11, 10, 35, 10, 1),
(11, 10, 35, 11, 1),
(11, 10, 35, 12, 1),
(11, 10, 35, 13, 1),
(11, 10, 35, 15, 1),
(11, 10, 35, 17, 1),
(11, 10, 35, 19, 1),
(11, 10, 35, 20, 1),
(11, 10, 35, 21, 1),
(11, 10, 35, 22, 1),
(11, 10, 35, 23, 1),
(11, 10, 35, 24, 1),
(11, 10, 35, 25, 1),
(11, 10, 35, 26, 1),
(11, 10, 35, 27, 1),
(11, 10, 35, 30, 1),
(11, 10, 35, 31, 1),
(11, 10, 35, 33, 1),
(11, 10, 35, 34, 1),
(11, 10, 35, 37, 1),
(11, 10, 35, 38, 1),
(11, 10, 35, 39, 1),
(11, 10, 35, 41, 1),
(11, 10, 35, 42, 1),
(11, 10, 35, 43, 1),
(11, 10, 35, 45, 1),
(11, 10, 36, 6, 1),
(11, 10, 36, 7, 1),
(11, 10, 36, 10, 1),
(11, 10, 36, 11, 1),
(11, 10, 36, 12, 1),
(11, 10, 36, 13, 1),
(11, 10, 36, 15, 1),
(11, 10, 36, 17, 1),
(11, 10, 36, 19, 1),
(11, 10, 36, 20, 1),
(11, 10, 36, 21, 1),
(11, 10, 36, 22, 1),
(11, 10, 36, 23, 1),
(11, 10, 36, 24, 1),
(11, 10, 36, 25, 1),
(11, 10, 36, 26, 1),
(11, 10, 36, 27, 1),
(11, 10, 36, 30, 1),
(11, 10, 36, 31, 1),
(11, 10, 36, 33, 1),
(11, 10, 36, 34, 1),
(11, 10, 36, 35, 1),
(11, 10, 36, 37, 1),
(11, 10, 36, 38, 1),
(11, 10, 36, 39, 1),
(11, 10, 36, 41, 1),
(11, 10, 36, 42, 1),
(11, 10, 36, 43, 1),
(11, 10, 36, 45, 1),
(11, 10, 37, 6, 1),
(11, 10, 37, 7, 1),
(11, 10, 37, 10, 1),
(11, 10, 37, 11, 1),
(11, 10, 37, 12, 1),
(11, 10, 37, 13, 1),
(11, 10, 37, 15, 1),
(11, 10, 37, 17, 1),
(11, 10, 37, 20, 1),
(11, 10, 37, 21, 1),
(11, 10, 37, 22, 1),
(11, 10, 37, 23, 1),
(11, 10, 37, 24, 1),
(11, 10, 37, 25, 1),
(11, 10, 37, 26, 1),
(11, 10, 37, 27, 1),
(11, 10, 37, 30, 1),
(11, 10, 37, 31, 1),
(11, 10, 37, 33, 1),
(11, 10, 37, 34, 1),
(11, 10, 37, 38, 1),
(11, 10, 37, 39, 1),
(11, 10, 37, 41, 1),
(11, 10, 37, 42, 1),
(11, 10, 37, 43, 1),
(11, 10, 37, 45, 1),
(11, 10, 38, 17, 1),
(11, 10, 38, 20, 1),
(11, 10, 38, 21, 1),
(11, 10, 38, 27, 1),
(11, 10, 39, 11, 1),
(11, 10, 39, 12, 1),
(11, 10, 39, 13, 1),
(11, 10, 39, 15, 1),
(11, 10, 39, 17, 1),
(11, 10, 39, 20, 1),
(11, 10, 39, 21, 1),
(11, 10, 39, 23, 1),
(11, 10, 39, 24, 1),
(11, 10, 39, 25, 1),
(11, 10, 39, 26, 1),
(11, 10, 39, 27, 1),
(11, 10, 39, 30, 1),
(11, 10, 39, 31, 1),
(11, 10, 39, 38, 1),
(11, 10, 39, 41, 1),
(11, 10, 39, 42, 1),
(11, 10, 39, 43, 1),
(11, 10, 40, 6, 1),
(11, 10, 40, 7, 1),
(11, 10, 40, 8, 1),
(11, 10, 40, 10, 1),
(11, 10, 40, 11, 1),
(11, 10, 40, 12, 1),
(11, 10, 40, 13, 1),
(11, 10, 40, 15, 1),
(11, 10, 40, 17, 1),
(11, 10, 40, 18, 1),
(11, 10, 40, 19, 1),
(11, 10, 40, 20, 1),
(11, 10, 40, 21, 1),
(11, 10, 40, 22, 1),
(11, 10, 40, 23, 1),
(11, 10, 40, 24, 1),
(11, 10, 40, 25, 1),
(11, 10, 40, 26, 1),
(11, 10, 40, 27, 1),
(11, 10, 40, 30, 1),
(11, 10, 40, 31, 1),
(11, 10, 40, 33, 1),
(11, 10, 40, 34, 1),
(11, 10, 40, 35, 1),
(11, 10, 40, 36, 1),
(11, 10, 40, 37, 1),
(11, 10, 40, 38, 1),
(11, 10, 40, 39, 1),
(11, 10, 40, 41, 1),
(11, 10, 40, 42, 1),
(11, 10, 40, 43, 1),
(11, 10, 40, 44, 1),
(11, 10, 40, 45, 1),
(11, 10, 41, 17, 1),
(11, 10, 41, 20, 1),
(11, 10, 41, 21, 1),
(11, 10, 41, 23, 1),
(11, 10, 41, 24, 1),
(11, 10, 41, 26, 1),
(11, 10, 41, 27, 1),
(11, 10, 41, 30, 1),
(11, 10, 41, 31, 1),
(11, 10, 41, 38, 1),
(11, 10, 41, 42, 1),
(11, 10, 41, 43, 1),
(11, 10, 42, 17, 1),
(11, 10, 42, 20, 1),
(11, 10, 42, 21, 1),
(11, 10, 42, 23, 1),
(11, 10, 42, 26, 1),
(11, 10, 42, 27, 1),
(11, 10, 42, 38, 1),
(11, 10, 42, 43, 1),
(11, 10, 43, 17, 1),
(11, 10, 43, 20, 1),
(11, 10, 43, 21, 1),
(11, 10, 43, 27, 1),
(11, 10, 43, 38, 1),
(11, 10, 44, 6, 1),
(11, 10, 44, 7, 1),
(11, 10, 44, 10, 1),
(11, 10, 44, 11, 1),
(11, 10, 44, 12, 1),
(11, 10, 44, 13, 1),
(11, 10, 44, 15, 1),
(11, 10, 44, 17, 1),
(11, 10, 44, 18, 1),
(11, 10, 44, 19, 1),
(11, 10, 44, 20, 1),
(11, 10, 44, 21, 1),
(11, 10, 44, 22, 1),
(11, 10, 44, 23, 1),
(11, 10, 44, 24, 1),
(11, 10, 44, 25, 1),
(11, 10, 44, 26, 1),
(11, 10, 44, 27, 1),
(11, 10, 44, 30, 1),
(11, 10, 44, 31, 1),
(11, 10, 44, 33, 1),
(11, 10, 44, 34, 1),
(11, 10, 44, 35, 1),
(11, 10, 44, 36, 1),
(11, 10, 44, 37, 1),
(11, 10, 44, 38, 1),
(11, 10, 44, 39, 1),
(11, 10, 44, 41, 1),
(11, 10, 44, 42, 1),
(11, 10, 44, 43, 1),
(11, 10, 44, 45, 1),
(11, 10, 45, 6, 1),
(11, 10, 45, 7, 1),
(11, 10, 45, 10, 1),
(11, 10, 45, 11, 1),
(11, 10, 45, 12, 1),
(11, 10, 45, 13, 1),
(11, 10, 45, 15, 1),
(11, 10, 45, 17, 1),
(11, 10, 45, 20, 1),
(11, 10, 45, 21, 1),
(11, 10, 45, 22, 1),
(11, 10, 45, 23, 1),
(11, 10, 45, 24, 1),
(11, 10, 45, 25, 1),
(11, 10, 45, 26, 1),
(11, 10, 45, 27, 1),
(11, 10, 45, 30, 1),
(11, 10, 45, 31, 1),
(11, 10, 45, 33, 1),
(11, 10, 45, 34, 1),
(11, 10, 45, 38, 1),
(11, 10, 45, 39, 1),
(11, 10, 45, 41, 1),
(11, 10, 45, 42, 1),
(11, 10, 45, 43, 1);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_class_feature`
--

CREATE TABLE IF NOT EXISTS `cat_class_feature` (
`id` int(10) unsigned NOT NULL,
  `name` varchar(767) NOT NULL,
  `cat_feature` int(10) unsigned NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=141 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_class_feature`
--

INSERT INTO `cat_class_feature` (`id`, `name`, `cat_feature`) VALUES
(55, '0', 2),
(67, '0', 5),
(69, '0', 6),
(83, '0', 8),
(1, '0', 9),
(8, '0', 10),
(10, '0', 11),
(12, '0', 12),
(15, '0', 13),
(21, '0', 14),
(23, '0', 15),
(30, '0', 16),
(32, '0', 17),
(34, '0', 18),
(36, '0', 19),
(40, '0', 20),
(42, '0', 21),
(44, '0', 22),
(46, '0', 23),
(48, '0', 24),
(50, '0', 25),
(2, 'Accessible-with-Physical-Impairments', 9),
(3, 'Accessible-with-Read-Write-Impairments', 9),
(4, 'Accessible-with-Read-Write-Impairments+Accessible-with-Physical-Impairments', 9),
(5, 'Accessible-with-Read-Write-Impairments+Accessible-with-Visual-Impairments+Accessible-with-Physical-Impairments', 9),
(6, 'Accessible-with-Visual-Impairments', 9),
(7, 'Accessible-with-Visual-Impairments+Accessible-with-Physical-Impairments', 9),
(17, 'Adopted-beyond-Academics', 13),
(19, 'Adopted-beyond-Academics+Adopted-in-Academics', 13),
(18, 'Adopted-beyond-Academics+Adopted-Repeatedly+Adopted-in-Academics', 13),
(20, 'Adopted-in-Academics', 13),
(16, 'Adopted-Repeatedly+Adopted-in-Academics', 13),
(13, 'Compatible-to-Extended-Browser', 12),
(14, 'Compatible-to-Native-Browser', 12),
(57, 'Device-to-Carry', 3),
(58, 'Document-to-Carry', 3),
(84, 'Easy-Recovery-from-Loss', 8),
(68, 'Easy-to-Learn', 5),
(62, 'Gesticulate-to-Enter', 4),
(52, 'More-than-One-Secret-to-Remember', 1),
(9, 'Negligible-Cost-per-User', 10),
(70, 'No-Fiddling-Tasks', 6),
(71, 'No-Fiddling-Tasks+No-Secret-to-Transcribe', 6),
(59, 'No-Object-to-Carry', 3),
(72, 'No-Obstructive-Latency', 6),
(73, 'No-Obstructive-Latency+No-Fiddling-Tasks', 6),
(74, 'No-Obstructive-Latency+No-Fiddling-Tasks+No-Secret-to-Transcribe', 6),
(75, 'No-Obstructive-Latency+No-Secret-to-Transcribe', 6),
(63, 'No-Physical-Effort', 4),
(53, 'No-Secret-to-Remember', 1),
(76, 'No-Secret-to-Transcribe', 6),
(47, 'No-Trusted-Third-Party', 23),
(22, 'Non-Proprietary', 14),
(77, 'Not-Susceptible-to-Assignment-Errors', 7),
(78, 'Not-Susceptible-to-Assignment-Errors+Not-Susceptible-to-Transmission-Errors', 7),
(79, 'Not-Susceptible-to-Input-Errors', 7),
(80, 'Not-Susceptible-to-Input-Errors+Not-Susceptible-to-Assignment-Errors', 7),
(81, 'Not-Susceptible-to-Input-Errors+Not-Susceptible-to-Assignment-Errors+Not-Susceptible-to-Transmission-Errors', 7),
(82, 'Not-Susceptible-to-Transmission-Errors', 7),
(54, 'One-Secret-to-Remember', 1),
(60, 'Phone-to-Carry', 3),
(49, 'Requiring-Explicit-Consent', 24),
(37, 'Resilient-to-Eavesdropping', 19),
(38, 'Resilient-to-Eavesdropping+Resilient-to-Malware', 19),
(41, 'Resilient-to-Leaks-from-Other-Verifiers', 20),
(39, 'Resilient-to-Malware', 19),
(43, 'Resilient-to-Phishing', 21),
(24, 'Resilient-to-Residual-Traces-Recording+Resilient-to-Sound-Recording', 15),
(25, 'Resilient-to-Shoulder-Surfing+Resilient-to-Residual-Traces-Recording+Resilient-to-Sound-Recording', 15),
(26, 'Resilient-to-Shoulder-Surfing+Resilient-to-Sound-Recording', 15),
(27, 'Resilient-to-Sound-Recording', 15),
(31, 'Resilient-to-Targeted-Impersonation', 16),
(45, 'Resilient-to-Theft', 22),
(33, 'Resilient-to-Throttled-Guessing', 17),
(35, 'Resilient-to-Unthrottled-Guessing', 18),
(28, 'Resilient-to-Visual-Recording+Resilient-to-Shoulder-Surfing+Resilient-to-Residual-Traces-Recording', 15),
(29, 'Resilient-to-Visual-Recording+Resilient-to-Shoulder-Surfing+Resilient-to-Residual-Traces-Recording+Resilient-to-Sound-Recording', 15),
(56, 'Scalable-for-Users', 2),
(64, 'Scribble-to-Enter', 4),
(11, 'Server-Compatible', 11),
(61, 'SmartCard-to-Carry', 3),
(65, 'Speak-to-Enter', 4),
(66, 'Type-to-Enter', 4),
(51, 'Unlinkable', 25);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_class_value_pair`
--

CREATE TABLE IF NOT EXISTS `cat_class_value_pair` (
  `cat_class_class_1` int(10) unsigned NOT NULL,
  `cat_class_class_2` int(10) unsigned NOT NULL,
  `value` double unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_class_value_pair`
--

INSERT INTO `cat_class_value_pair` (`cat_class_class_1`, `cat_class_class_2`, `value`) VALUES
(1, 2, 1),
(1, 3, 1),
(1, 4, 1),
(1, 5, 1),
(1, 6, 1),
(1, 7, 1),
(2, 3, 1),
(2, 4, 1),
(2, 5, 1),
(2, 6, 1),
(2, 7, 1),
(3, 4, 1),
(3, 5, 1),
(3, 6, 1),
(3, 7, 1),
(4, 5, 1),
(4, 6, 1),
(4, 7, 1),
(5, 6, 1),
(5, 7, 1),
(6, 7, 1),
(8, 9, 1),
(10, 11, 1),
(12, 13, 1),
(12, 14, 1),
(13, 14, 1),
(15, 16, 1),
(15, 17, 1),
(15, 18, 1),
(15, 19, 1),
(15, 20, 1),
(16, 17, 9),
(16, 18, 9),
(16, 19, 0.111111),
(16, 20, 1),
(17, 18, 9),
(17, 19, 1),
(17, 20, 1),
(18, 19, 9),
(18, 20, 1),
(19, 20, 1),
(21, 22, 1),
(23, 24, 1),
(23, 25, 1),
(23, 26, 1),
(23, 27, 1),
(23, 28, 1),
(23, 29, 1),
(24, 25, 1),
(24, 26, 1),
(24, 27, 1),
(24, 28, 1),
(24, 29, 1),
(25, 26, 1),
(25, 27, 1),
(25, 28, 1),
(25, 29, 1),
(26, 27, 1),
(26, 28, 1),
(26, 29, 1),
(27, 28, 1),
(27, 29, 1),
(28, 29, 1),
(30, 31, 1),
(32, 33, 0.111111),
(34, 35, 1),
(36, 37, 1),
(36, 38, 1),
(36, 39, 1),
(37, 38, 1),
(37, 39, 1),
(38, 39, 1),
(40, 41, 9),
(42, 43, 1),
(44, 45, 0.111111),
(46, 47, 1),
(48, 49, 1),
(50, 51, 0.111111),
(52, 53, 0.111111),
(52, 54, 0.2),
(53, 54, 5),
(55, 56, 1),
(57, 58, 1),
(57, 59, 1),
(57, 60, 1),
(57, 61, 1),
(58, 59, 1),
(58, 60, 1),
(58, 61, 1),
(59, 60, 1),
(59, 61, 1),
(60, 61, 1),
(62, 63, 1),
(62, 64, 1),
(62, 65, 1),
(62, 66, 1),
(63, 64, 1),
(63, 65, 1),
(63, 66, 1),
(64, 65, 1),
(64, 66, 1),
(65, 66, 1),
(67, 68, 1),
(69, 70, 1),
(69, 71, 1),
(69, 72, 1),
(69, 73, 1),
(69, 74, 1),
(69, 75, 1),
(69, 76, 1),
(70, 71, 1),
(70, 72, 1),
(70, 73, 1),
(70, 74, 1),
(70, 75, 1),
(70, 76, 1),
(71, 72, 1),
(71, 73, 1),
(71, 74, 1),
(71, 75, 1),
(71, 76, 1),
(72, 73, 1),
(72, 74, 1),
(72, 75, 1),
(72, 76, 1),
(73, 74, 1),
(73, 75, 1),
(73, 76, 1),
(74, 75, 1),
(74, 76, 1),
(75, 76, 1),
(77, 78, 1),
(77, 79, 1),
(77, 80, 1),
(77, 81, 1),
(77, 82, 1),
(78, 79, 1),
(78, 80, 1),
(78, 81, 1),
(78, 82, 1),
(79, 80, 1),
(79, 81, 1),
(79, 82, 1),
(80, 81, 1),
(80, 82, 1),
(81, 82, 1),
(83, 84, 0.111111);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_features`
--

CREATE TABLE IF NOT EXISTS `cat_features` (
`id` int(10) unsigned NOT NULL,
  `category` int(10) unsigned NOT NULL,
  `name` varchar(45) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_features`
--

INSERT INTO `cat_features` (`id`, `category`, `name`) VALUES
(1, 1, 'Memorywise-Effortless'),
(2, 1, 'Scalable-for-Users'),
(3, 1, 'Nothing-to-Carry'),
(4, 1, 'Physically-Effortless'),
(5, 1, 'Easy-to-Learn'),
(6, 1, 'Efficient-to-Use'),
(7, 1, 'Infrequent-Errors'),
(8, 1, 'Easy-Recovery-from-Loss'),
(9, 2, 'Accessible'),
(10, 2, 'Negligible-Cost-per-User'),
(11, 2, 'Server-Compatible'),
(12, 2, 'Browser-Compatible'),
(13, 2, 'Mature'),
(14, 2, 'Non-Proprietary'),
(15, 3, 'Resilient-to-Physical-Oberservation'),
(16, 3, 'Resilient-to-Targeted-Impersonation'),
(17, 3, 'Resilient-to-Throttled-Guessing'),
(18, 3, 'Resilient-to-Unthrottled-Guessing'),
(19, 3, 'Resilient-to-Internal-Observation'),
(20, 3, 'Resilient-to-Leaks-form-Other-Verifiers'),
(21, 3, 'Resilient-to-Phishing'),
(22, 3, 'Resilient-to-Theft'),
(23, 3, 'Resilient-to-Third-Party'),
(24, 3, 'Requiring-Explicit-Consent'),
(25, 3, 'Unlinkable');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `cat_subfeatures`
--

CREATE TABLE IF NOT EXISTS `cat_subfeatures` (
`id` int(10) unsigned NOT NULL,
  `name` varchar(45) NOT NULL,
  `feature` int(10) unsigned NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=145 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `cat_subfeatures`
--

INSERT INTO `cat_subfeatures` (`id`, `name`, `feature`) VALUES
(1, 'No-Secret-to-Remember', 1),
(2, 'One-Secret-to-Remember', 1),
(3, 'More-than-One-Secret-to-Remember', 1),
(4, 'Scalable-for-Users', 2),
(5, 'No-Object-to-Carry', 3),
(6, 'Phone-to-Carry', 3),
(7, 'SmartCard-to-Carry', 3),
(8, 'Document-to-Carry', 3),
(9, 'Device-to-Carry', 3),
(10, 'No-Physical-Effort', 4),
(11, 'Speak-to-Enter', 4),
(12, 'Type-to-Enter', 4),
(13, 'Scribble-to-Enter', 4),
(14, 'Gesticulate-to-Enter', 4),
(15, 'Easy-to-Learn', 5),
(16, 'No-Obstructive-Latency', 6),
(17, 'No-Fiddling-Tasks', 6),
(18, 'No-Secret-to-Transcribe', 6),
(19, 'Not-Susceptible-to-Input-Errors', 7),
(20, 'Not-Susceptible-to-Assignment-Errors', 7),
(21, 'Not-Susceptible-to-Transmission-Errors', 7),
(22, 'Easy-Recovery-from-Loss', 8),
(23, 'Accessible-with-Read-Write-Impairments', 9),
(24, 'Accessible-with-Visual-Impairments', 9),
(25, 'Accessible-with-Physical-Impairments', 9),
(26, 'Negligible-Cost-per-User', 10),
(27, 'Server-Compatible', 11),
(28, 'Compatible-to-Native-Browser', 12),
(29, 'Compatible-to-Extended-Browser', 12),
(30, 'Adopted-beyond-Academics', 13),
(31, 'Adopted-Repeatedly', 13),
(32, 'Adopted-in-Academics', 13),
(33, 'Non-Proprietary', 14),
(34, 'Resilient-to-Visual-Recording', 15),
(35, 'Resilient-to-Shoulder-Surfing', 15),
(36, 'Resilient-to-Residual-Traces-Recording', 15),
(37, 'Resilient-to-Sound-Recording', 15),
(38, 'Resilient-to-Targeted-Impersonation', 16),
(39, 'Resilient-to-Throttled-Guessing', 17),
(40, 'Resilient-to-Unthrottled-Guessing', 18),
(41, 'Resilient-to-Eavesdropping', 19),
(42, 'Resilient-to-Malware', 19),
(43, 'Resilient-to-Leaks-from-Other-Verifiers', 20),
(44, 'Resilient-to-Phishing', 21),
(45, 'Resilient-to-Theft', 22),
(46, 'No-Trusted-Third-Party', 23),
(47, 'Requiring-Explicit-Consent', 24),
(48, 'Unlinkable', 25);

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `decision_log`
--

CREATE TABLE IF NOT EXISTS `decision_log` (
`logid` int(10) unsigned NOT NULL,
  `quantity` int(10) unsigned NOT NULL,
  `jsondata` text NOT NULL,
  `jsonhash` varchar(32) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_auth`
--

CREATE TABLE IF NOT EXISTS `discuss_auth` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `post_type` enum('comment','suggestion') DEFAULT NULL,
  `post_threadstatus` enum('active','accepted','rejected') DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_feature`
--

CREATE TABLE IF NOT EXISTS `discuss_feature` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `post_type` enum('comment','suggestion') DEFAULT NULL,
  `post_threadstatus` enum('active','accepted','rejected') DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_subfeature`
--

CREATE TABLE IF NOT EXISTS `discuss_subfeature` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `post_type` enum('comment','suggestion') DEFAULT NULL,
  `post_threadstatus` enum('active','accepted','rejected') DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_thread_auth`
--

CREATE TABLE IF NOT EXISTS `discuss_thread_auth` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `thread_id` int(11) DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_thread_feature`
--

CREATE TABLE IF NOT EXISTS `discuss_thread_feature` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `thread_id` int(11) DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `discuss_thread_subfeature`
--

CREATE TABLE IF NOT EXISTS `discuss_thread_subfeature` (
`id` int(11) NOT NULL,
  `foreignid` int(11) DEFAULT NULL,
  `thread_id` int(11) DEFAULT NULL,
  `post_content` varchar(8000) DEFAULT NULL,
  `post_authorid` int(11) DEFAULT NULL,
  `post_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Stellvertreter-Struktur des Views `feature_authentications_value`
--
CREATE TABLE IF NOT EXISTS `feature_authentications_value` (
`cat_feature` int(10) unsigned
,`auth_authentication_1` int(10) unsigned
,`auth_authentication_2` int(10) unsigned
,`value` double
);
-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `feature_info`
--

CREATE TABLE IF NOT EXISTS `feature_info` (
  `id` int(10) unsigned NOT NULL DEFAULT '0',
  `description` varchar(8000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `subfeature_info`
--

CREATE TABLE IF NOT EXISTS `subfeature_info` (
  `id` int(10) unsigned NOT NULL DEFAULT '0',
  `description` varchar(8000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `users`
--

CREATE TABLE IF NOT EXISTS `users` (
`Id` int(11) NOT NULL,
  `LastName` varchar(255) DEFAULT NULL,
  `FirstName` varchar(255) DEFAULT NULL,
  `Title` varchar(255) DEFAULT NULL,
  `EMail` varchar(255) DEFAULT NULL,
  `Organization` varchar(255) DEFAULT NULL,
  `Password` char(255) DEFAULT NULL,
  `AccountStatus` enum('activated','disabled') DEFAULT NULL,
  `RegisterDate` datetime DEFAULT NULL,
  `SessionIpv4` varchar(15) DEFAULT NULL,
  `IsAdmin` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `users`
--

INSERT INTO `users` (`Id`, `LastName`, `FirstName`, `Title`, `EMail`, `Organization`, `Password`, `AccountStatus`, `RegisterDate`, `SessionIpv4`, `IsAdmin`) VALUES
(1, 'Admin', 'Admin', 'Dr.', 'q@q.de', 'Admin-Village', '21232f297a57a5a743894a0e4a801fc3', 'activated', '2016-01-20 16:41:56', '130.83.221.128', 1);

-- --------------------------------------------------------

--
-- Struktur des Views `authentication_feature_class`
--
DROP TABLE IF EXISTS `authentication_feature_class`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `authentication_feature_class` AS select `a`.`id` AS `auth_authentication`,`cf`.`id` AS `cat_feature`,(select if(isnull((select `csf`.`id` from ((`auth_subfeatures` `aas` join `cat_subfeatures` `csf` on((`aas`.`cat_subfeature` = `csf`.`id`))) join `cat_features` `cfi` on((`cfi`.`id` = `csf`.`feature`))) where ((`cfi`.`id` = `cf`.`id`) and (`aas`.`auth_authentication` = `a`.`id`)) limit 1)),(select `cat_class_feature`.`id` from `cat_class_feature` where ((`cat_class_feature`.`name` = '0') and (`cat_class_feature`.`cat_feature` = `cf`.`id`))),if(((select count(`cs`.`id`) from (`auth_subfeatures` `aas` join `cat_subfeatures` `cs` on((`cs`.`id` = `aas`.`cat_subfeature`))) where ((`cs`.`feature` = `cf`.`id`) and (`aas`.`auth_authentication` = `a`.`id`))) = 1),(select `cat_class_feature`.`id` from `cat_class_feature` where ((`cat_class_feature`.`name` = (select `cs`.`name` from (`cat_subfeatures` `cs` join `auth_subfeatures` `aas` on((`aas`.`cat_subfeature` = `cs`.`id`))) where ((`aas`.`auth_authentication` = `a`.`id`) and (`cs`.`feature` = `cf`.`id`)))) and (`cat_class_feature`.`cat_feature` = `cf`.`id`))),(select `ccf`.`id` from `cat_class_feature` `ccf` where ((`ccf`.`name` = (select group_concat(`cs`.`name` separator '+') from ((`cat_subfeatures` `cs` join `cat_features` `cfi` on((`cs`.`feature` = `cfi`.`id`))) join `auth_subfeatures` `aas` on((`aas`.`cat_subfeature` = `cs`.`id`))) where ((`aas`.`auth_authentication` = `a`.`id`) and (`cfi`.`id` = `cf`.`id`)))) and (`ccf`.`cat_feature` = `cf`.`id`)))))) AS `cat_class_feature` from (`auth_authentications` `a` join `cat_features` `cf`) order by `a`.`id`,`cf`.`id`;

-- --------------------------------------------------------

--
-- Struktur des Views `category_feature_subfeature`
--
DROP TABLE IF EXISTS `category_feature_subfeature`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `category_feature_subfeature` AS select `c`.`name` AS `category`,`f`.`name` AS `feature`,`s`.`name` AS `subfeature` from ((`cat_categories` `c` left join `cat_features` `f` on((`f`.`category` = `c`.`id`))) left join `cat_subfeatures` `s` on((`s`.`feature` = `f`.`id`))) order by `c`.`id`,`f`.`id`,`s`.`id`;

-- --------------------------------------------------------

--
-- Struktur des Views `feature_authentications_value`
--
DROP TABLE IF EXISTS `feature_authentications_value`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `feature_authentications_value` AS select `a1`.`cat_feature` AS `cat_feature`,`a1`.`auth_authentication` AS `auth_authentication_1`,`a2`.`auth_authentication` AS `auth_authentication_2`,(select if((`a1`.`cat_class_feature` = `a2`.`cat_class_feature`),ifnull((select `ccavp`.`value` from `cat_class_authentications_value_pair` `ccavp` where ((`ccavp`.`cat_feature` = `a1`.`cat_feature`) and (`ccavp`.`cat_class_feature` = `a1`.`cat_class_feature`) and (`ccavp`.`auth_authentication_1` = `a1`.`auth_authentication`) and (`ccavp`.`auth_authentication_2` = `a2`.`auth_authentication`)) limit 1),ifnull((select (1 / `ccavp`.`value`) from `cat_class_authentications_value_pair` `ccavp` where ((`ccavp`.`cat_feature` = `a1`.`cat_feature`) and (`ccavp`.`cat_class_feature` = `a1`.`cat_class_feature`) and (`ccavp`.`auth_authentication_1` = `a2`.`auth_authentication`) and (`ccavp`.`auth_authentication_2` = `a1`.`auth_authentication`)) limit 1),1)),ifnull((select `ccvp`.`value` from `cat_class_value_pair` `ccvp` where ((`ccvp`.`cat_class_class_1` = `a1`.`cat_class_feature`) and (`ccvp`.`cat_class_class_2` = `a2`.`cat_class_feature`)) limit 1),ifnull((select (1 / `ccvp`.`value`) from `cat_class_value_pair` `ccvp` where ((`ccvp`.`cat_class_class_1` = `a2`.`cat_class_feature`) and (`ccvp`.`cat_class_class_2` = `a1`.`cat_class_feature`)) limit 1),1)))) AS `value` from (`authentication_feature_class` `a1` join `authentication_feature_class` `a2`) where (`a1`.`cat_feature` = `a2`.`cat_feature`) order by `a1`.`cat_feature`,`a1`.`auth_authentication`,`a2`.`auth_authentication`;

--
-- Indizes der exportierten Tabellen
--

--
-- Indizes f端r die Tabelle `auth_authentications`
--
ALTER TABLE `auth_authentications`
 ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);

--
-- Indizes f端r die Tabelle `auth_info`
--
ALTER TABLE `auth_info`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `auth_performances`
--
ALTER TABLE `auth_performances`
 ADD UNIQUE KEY `auth_authentication` (`auth_authentication`,`cat_feature`), ADD KEY `cat_feature` (`cat_feature`);

--
-- Indizes f端r die Tabelle `auth_subfeatures`
--
ALTER TABLE `auth_subfeatures`
 ADD PRIMARY KEY (`auth_authentication`,`cat_subfeature`), ADD KEY `cat_subfeature` (`cat_subfeature`);

--
-- Indizes f端r die Tabelle `avg_ci_donegan_dodd`
--
ALTER TABLE `avg_ci_donegan_dodd`
 ADD PRIMARY KEY (`order`);

--
-- Indizes f端r die Tabelle `cat_categories`
--
ALTER TABLE `cat_categories`
 ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);

--
-- Indizes f端r die Tabelle `cat_class_authentications_value_pair`
--
ALTER TABLE `cat_class_authentications_value_pair`
 ADD UNIQUE KEY `auth_authentication_1` (`auth_authentication_1`,`auth_authentication_2`,`cat_feature`,`cat_class_feature`), ADD KEY `cat_feature` (`cat_feature`), ADD KEY `cat_class_feature` (`cat_class_feature`), ADD KEY `auth_authentication_2` (`auth_authentication_2`);

--
-- Indizes f端r die Tabelle `cat_class_feature`
--
ALTER TABLE `cat_class_feature`
 ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`,`cat_feature`);

--
-- Indizes f端r die Tabelle `cat_class_value_pair`
--
ALTER TABLE `cat_class_value_pair`
 ADD UNIQUE KEY `cat_class_class_1` (`cat_class_class_1`,`cat_class_class_2`), ADD KEY `cat_class_class_2` (`cat_class_class_2`);

--
-- Indizes f端r die Tabelle `cat_features`
--
ALTER TABLE `cat_features`
 ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`), ADD KEY `category` (`category`);

--
-- Indizes f端r die Tabelle `cat_subfeatures`
--
ALTER TABLE `cat_subfeatures`
 ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`), ADD KEY `feature` (`feature`);

--
-- Indizes f端r die Tabelle `decision_log`
--
ALTER TABLE `decision_log`
 ADD PRIMARY KEY (`logid`), ADD UNIQUE KEY `jsonhash` (`jsonhash`);

--
-- Indizes f端r die Tabelle `discuss_auth`
--
ALTER TABLE `discuss_auth`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `discuss_feature`
--
ALTER TABLE `discuss_feature`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `discuss_subfeature`
--
ALTER TABLE `discuss_subfeature`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `discuss_thread_auth`
--
ALTER TABLE `discuss_thread_auth`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `discuss_thread_feature`
--
ALTER TABLE `discuss_thread_feature`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `discuss_thread_subfeature`
--
ALTER TABLE `discuss_thread_subfeature`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `feature_info`
--
ALTER TABLE `feature_info`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `subfeature_info`
--
ALTER TABLE `subfeature_info`
 ADD PRIMARY KEY (`id`);

--
-- Indizes f端r die Tabelle `users`
--
ALTER TABLE `users`
 ADD PRIMARY KEY (`Id`), ADD UNIQUE KEY `Id` (`Id`), ADD UNIQUE KEY `EMail` (`EMail`);

--
-- AUTO_INCREMENT f端r exportierte Tabellen
--

--
-- AUTO_INCREMENT f端r Tabelle `auth_authentications`
--
ALTER TABLE `auth_authentications`
MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=137;
--
-- AUTO_INCREMENT f端r Tabelle `cat_categories`
--
ALTER TABLE `cat_categories`
MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT f端r Tabelle `cat_class_feature`
--
ALTER TABLE `cat_class_feature`
MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=141;
--
-- AUTO_INCREMENT f端r Tabelle `cat_features`
--
ALTER TABLE `cat_features`
MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=76;
--
-- AUTO_INCREMENT f端r Tabelle `cat_subfeatures`
--
ALTER TABLE `cat_subfeatures`
MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=145;
--
-- AUTO_INCREMENT f端r Tabelle `decision_log`
--
ALTER TABLE `decision_log`
MODIFY `logid` int(10) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_auth`
--
ALTER TABLE `discuss_auth`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_feature`
--
ALTER TABLE `discuss_feature`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_subfeature`
--
ALTER TABLE `discuss_subfeature`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_thread_auth`
--
ALTER TABLE `discuss_thread_auth`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_thread_feature`
--
ALTER TABLE `discuss_thread_feature`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `discuss_thread_subfeature`
--
ALTER TABLE `discuss_thread_subfeature`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT f端r Tabelle `users`
--
ALTER TABLE `users`
MODIFY `Id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=20;
--
-- Constraints der exportierten Tabellen
--

--
-- Constraints der Tabelle `auth_info`
--
ALTER TABLE `auth_info`
ADD CONSTRAINT `auth_info_ibfk_1` FOREIGN KEY (`id`) REFERENCES `auth_authentications` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `auth_performances`
--
ALTER TABLE `auth_performances`
ADD CONSTRAINT `auth_performances_ibfk_2` FOREIGN KEY (`cat_feature`) REFERENCES `cat_features` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `auth_performances_ibfk_1` FOREIGN KEY (`auth_authentication`) REFERENCES `auth_authentications` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `auth_subfeatures`
--
ALTER TABLE `auth_subfeatures`
ADD CONSTRAINT `auth_subfeatures_ibfk_1` FOREIGN KEY (`auth_authentication`) REFERENCES `auth_authentications` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `auth_subfeatures_ibfk_2` FOREIGN KEY (`cat_subfeature`) REFERENCES `cat_subfeatures` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `cat_class_authentications_value_pair`
--
ALTER TABLE `cat_class_authentications_value_pair`
ADD CONSTRAINT `cat_class_authentications_value_pair_ibfk_1` FOREIGN KEY (`cat_feature`) REFERENCES `cat_features` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `cat_class_authentications_value_pair_ibfk_2` FOREIGN KEY (`cat_class_feature`) REFERENCES `cat_class_feature` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `cat_class_authentications_value_pair_ibfk_3` FOREIGN KEY (`auth_authentication_1`) REFERENCES `auth_authentications` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `cat_class_authentications_value_pair_ibfk_4` FOREIGN KEY (`auth_authentication_2`) REFERENCES `auth_authentications` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `cat_class_value_pair`
--
ALTER TABLE `cat_class_value_pair`
ADD CONSTRAINT `cat_class_value_pair_ibfk_1` FOREIGN KEY (`cat_class_class_1`) REFERENCES `cat_class_feature` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT `cat_class_value_pair_ibfk_2` FOREIGN KEY (`cat_class_class_2`) REFERENCES `cat_class_feature` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `cat_features`
--
ALTER TABLE `cat_features`
ADD CONSTRAINT `cat_features_ibfk_1` FOREIGN KEY (`category`) REFERENCES `cat_categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `cat_subfeatures`
--
ALTER TABLE `cat_subfeatures`
ADD CONSTRAINT `cat_subfeatures_ibfk_1` FOREIGN KEY (`feature`) REFERENCES `cat_features` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `feature_info`
--
ALTER TABLE `feature_info`
ADD CONSTRAINT `feature_info_ibfk_3` FOREIGN KEY (`id`) REFERENCES `cat_features` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints der Tabelle `subfeature_info`
--
ALTER TABLE `subfeature_info`
ADD CONSTRAINT `subfeature_info_ibfk_2` FOREIGN KEY (`id`) REFERENCES `cat_subfeatures` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
